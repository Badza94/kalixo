---
alwaysApply: false
---

## title: <ActionBar.Group>

import { PuckPreview } from "@/docs/components/Preview";
import { ActionBar } from "@/puck";

# \<ActionBar.Group\>

Render an action group in the [`<ActionBar>`](action-bar).

```tsx showLineNumbers {2-3} copy
<ActionBar label="Actions">
  <ActionBar.Group>Group 1</ActionBar.Group>
  <ActionBar.Group>Group 2</ActionBar.Group>
</ActionBar>
```

<PuckPreview>
  <div style={{ display: "flex" }}>
    <ActionBar label="Actions">
      <ActionBar.Group>Group 1</ActionBar.Group>
      <ActionBar.Group>Group 2</ActionBar.Group>
    </ActionBar>
  </div>
</PuckPreview>

## Props

| Prop                    | Example   | Type      | Status   |
| ----------------------- | --------- | --------- | -------- |
| [`children`](#children) | `<div />` | ReactNode | Required |

## Required Props

### `children`

A node to render as the children of the action. If a fragment, the items will be rendered in a flex row.

Normally contains [`<ActionBar.Action>`](action-bar-action)

{/_ ===== ./docs/pages/docs/api-reference/components/action-bar-label.mdx ===== _/}

---

## title: <ActionBar.Label>

import { PuckPreview } from "@/docs/components/Preview";
import { ActionBar } from "@/puck";

# \<ActionBar.Label\>

Render a label in the [`<ActionBar>`](action-bar) or an [`<ActionBar.Group>`](action-bar-group).

```tsx showLineNumbers {2,4} copy
<ActionBar>
  <ActionBar.Label label="Label 1" />
  <ActionBar.Group>
    <ActionBar.Label label="Label 2" />
    <ActionBar.Action>‚òÖ</ActionBar.Action>
  </ActionBar.Group>
</ActionBar>
```

<PuckPreview>
  <div style={{ display: "flex" }}>
    <ActionBar>
      <ActionBar.Label label="Label 1" />
      <ActionBar.Group>
        <ActionBar.Label label="Label 2" />
        <ActionBar.Action>‚òÖ</ActionBar.Action>
      </ActionBar.Group>
    </ActionBar>
  </div>
</PuckPreview>

## Props

| Prop              | Example   | Type   | Status   |
| ----------------- | --------- | ------ | -------- |
| [`label`](#label) | `"Label"` | String | Required |

## Required Props

### `label`

The label text.

{/_ ===== ./docs/pages/docs/api-reference/components/action-bar.mdx ===== _/}

---

## title: <ActionBar>

import { PuckPreview } from "@/docs/components/Preview";
import { ActionBar } from "@/puck";

# \<ActionBar\>

Render the Puck ActionBar. Use this when overriding the [actionBar](/docs/api-reference/overrides/action-bar).

```tsx showLineNumbers copy
<ActionBar label="Actions">
  <ActionBar.Group>
    <ActionBar.Action onClick={() => console.log("Clicked!")}>
      ‚òÖ
    </ActionBar.Action>
  </ActionBar.Group>
</ActionBar>
```

<PuckPreview>
  <div style={{ display: "flex" }}>
    <ActionBar label="Actions">
      <ActionBar.Group>
        <ActionBar.Action>‚òÖ</ActionBar.Action>
      </ActionBar.Group>
    </ActionBar>
  </div>
</PuckPreview>

## Props

| Prop                    | Example   | Type      | Status   |
| ----------------------- | --------- | --------- | -------- |
| [`children`](#children) | `<div />` | ReactNode | Required |
| [`label`](#label)       | `"Label"` | String    | Required |

## Required Props

### `children`

The children for the ActionBar. Normally a fragment of [`<ActionBar.Action>` components](/docs/api-reference/components/action-bar-action).

If this is a fragment, it will be rendered in a flex row.

### `label`

The label for the ActionBar.

{/_ ===== ./docs/pages/docs/api-reference/components/auto-field.mdx ===== _/}

---

## title: <AutoField>

import { ConfigPreview } from "@/docs/components/Preview";
import { AutoField } from "@/puck";

# \<AutoField\>

Render a Puck field based on a [Field](/docs/api-reference/fields) object. Use this when building [custom fields](/docs/extending-puck/custom-fields) that need to use Puck-style fields internally.

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: ({ onChange, value }) => {
          return (
            <AutoField
              field={{ type: "text" }}
onChange={onChange}
value={value}
/>
);
},
},
},
defaultProps: {
title: "Hello, world",
},
render: ({ title }) => {
return <p style={{ margin: 0 }}>{title}</p>;
},
}}
/>

```tsx {1,4} copy
import { Autofield } from "@measured/puck";

const CustomField = ({ onChange, value }) => (
  <AutoField field={{ type: "text" }} onChange={onChange} value={value} />
);

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: MyCustomField,
        },
      },
    },
  },
};
```

## Props

| Prop                    | Example                      | Type                                | Status   |
| ----------------------- | ---------------------------- | ----------------------------------- | -------- |
| [`field`](#field)       | `{ type: "text" }`           | [Field](/docs/api-reference/fields) | Required |
| [`onChange`](#onchange) | `onChange("Goodbye, world")` | Function                            | Required |
| [`value`](#value)       | `"Hello, world"`             | Any                                 | Required |
| [`id`](#id)             | `"my-input"`                 | String                              | -        |
| [`readOnly`](#readonly) | `true`                       | Boolean                             | -        |

## Required Props

### `field`

An object containing the user defined [Field](/docs/api-reference/fields) configuration.

### `onChange`

A callback that triggers when the value changes.

### `value`

The current value for the field.

## Optional Props

### `id`

An optional ID for this field. Will be generated if not specified.

### `readOnly`

A boolean describing whether or not this field is `readOnly`.

## Further reading

- [Custom fields](/docs/extending-puck/custom-fields)
- [The `<FieldLabel>` API reference](/docs/api-reference/components/field-label)

{/_ ===== ./docs/pages/docs/api-reference/components/drawer-item.mdx ===== _/}

---

## title: <Drawer.Item>

import { PuckPreview } from "@/docs/components/Preview";
import { Drawer } from "@/puck";

# \<Drawer.Item\>

An item that can be dragged from a [`<Drawer>`](drawer).

```tsx {7} copy
import { Puck, Drawer } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Drawer>
        <Drawer.Item name="Orange" />
      </Drawer>
    </Puck>
  );
}
```

## Props

| Prop                                | Example                   | Type     | Status   |
| ----------------------------------- | ------------------------- | -------- | -------- |
| [`name`](#name)                     | `name: "Orange"`          | String   | Required |
| [`children`](#children)             | `children: () => <div />` | Function | -        |
| [`id`](#id)                         | `id: "OrangeComponent"`   | String   | -        |
| [`isDragDisabled`](#isdragdisabled) | `isDragDisabled: false`   | Boolean  | -        |

## Required props

### `name`

The name of this drawer item.

- This will be rendered on the item by default.
- Will be used as the `id`, unless otherwise specified

## Optional props

### `children`

A custom render function to render inside the component.

```tsx {8} copy
import { Puck, Drawer } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Drawer>
        <Drawer.Item name="Orange">{() => <div>Orange üçä</div>}</Drawer.Item>
      </Drawer>
    </Puck>
  );
}
```

<PuckPreview config={{}} data={{ root: { props: {} }, content: [] }}>
<Drawer>
<Drawer.Item name="Orange">{() => <div>Orange üçä</div>}</Drawer.Item>
</Drawer>
</PuckPreview>

#### Render Props

| Prop                      | Example             | Type   |
| ------------------------- | ------------------- | ------ |
| [`children`](#children-1) | `children: <div />` | String |

##### `children`

The original node for the drawer item.

### `id`

A unique id for this drawer item. Defaults to the value of [`name`](#name).

If using the `<Drawer>` as a component list to be dragged into `<Puck.Preview>`, this should be the key of a component defined in the [Config](/docs/api-reference/configuration/config).

### `isDragDisabled`

Whether or not this item is disabled.

{/_ ===== ./docs/pages/docs/api-reference/components/drawer.mdx ===== _/}

---

## title: <Drawer>

import { PuckPreview } from "@/docs/components/Preview";
import { Puck, Drawer } from "@/puck";

# \<Drawer\>

A list of items that can be dragged into a [`<Puck.Preview>`](puck-preview). Used for composing custom Puck UIs.

<PuckPreview
config={{ components: { Orange: { render: () => <div>Orange</div> } } }}
data={{ root: { props: {} }, content: [] }}

>   <Drawer>

    <Drawer.Item name="Orange" />

  </Drawer>
</PuckPreview>

```tsx {6-8} /Drawer/1 copy
import { Puck, Drawer } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Drawer>
        <Drawer.Item name="Orange" />
      </Drawer>
    </Puck>
  );
}
```

## Props

| Param                   | Example                     | Type      | Status   |
| ----------------------- | --------------------------- | --------- | -------- |
| [`children`](#children) | `children: <Drawer.Item />` | ReactNode | Required |

## Required props

### `children`

A React node representing the contents of the `<Drawer>`. Will likely contain [`<Drawer.Item>`](drawer-item) nodes.

{/_ ===== ./docs/pages/docs/api-reference/components/drop-zone.mdx ===== _/}

---

## title: <DropZone>

import { Callout } from "nextra/components";

# \<DropZone\>

<Callout>
The [`<DropZone>` component](/docs/api-reference/components/drop-zone) component is being replaced by the [`slot` field](/docs/api-reference/fields/slot), and will soon be deprecated and removed. For migration notes, see [these docs](/docs/guides/migrations/dropzones-to-slots).
</Callout>

Place droppable regions (zones) inside other components to enable nested components.

```tsx {1,9} copy
import { DropZone } from "@measured/puck";

const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" />
          </div>
        );
      },
    },
  },
};
```

## Props

| Param                               | Example                      | Type          | Status   |
| ----------------------------------- | ---------------------------- | ------------- | -------- |
| [`zone`](#zone)                     | `zone: "my-zone"`            | String        | Required |
| [`allow`](#allow)                   | `allow: ["HeadingBlock"]`    | Array         | -        |
| [`className`](#classname)           | `className: "MyClass"`       | String        | -        |
| [`collisionAxis`](#collisionaxis)   | `collisionAxis: "x"`         | String        | -        |
| [`disallow`](#disallow)             | `disallow: ["HeadingBlock"]` | Array         | -        |
| [`minEmptyHeight`](#minemptyheight) | `minEmptyHeight: 256`        | Number        | -        |
| [`ref`](#ref)                       | `ref: ref`                   | Ref           | -        |
| [`style`](#style)                   | `style: {display: "flex"}`   | CSSProperties | -        |

## Required props

### `zone`

Set the zone identifier for the given DropZone.

Must be unique within this component, but two different components can both define DropZones with the same `zone` value.

```tsx /zone="my-content"/ copy
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" />
          </div>
        );
      },
    },
  },
};
```

## Optional props

### `allow`

Only allow specific components to be dragged into the DropZone:

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" allow={["HeadingBlock"]} />
          </div>
        );
      },
    },
  },
};
```

### `className`

Provide a className to the DropZone component. The default DropZone styles will still be applied.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" className="MyComponent" />
          </div>
        );
      },
    },
  },
};
```

### `collisionAxis`

Configure which axis Puck will use for overlap collision detection.

Options:

- `x` - detect collisions based their x-axis overlap
- `y` - detect collisions based their y-axis overlap
- `dynamic` - automatically choose an axis based on the direction of travel

The defaults are set based on the CSS layout of the parent:

- grid: `dynamic`
- flex (row): `x`
- inline/inline-block: `x`
- Everything else: `y`

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" collisionAxis="dynamic" />
          </div>
        );
      },
    },
  },
};
```

### `disallow`

Allow all but specific components to be dragged into the DropZone. Any items in `allow` will override `disallow`.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" disallow={["HeadingBlock"]} />
          </div>
        );
      },
    },
  },
};
```

### `minEmptyHeight`

The minimum height of the DropZone when empty, in pixels. Defaults to `128`.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" minEmptyHeight={256} />
          </div>
        );
      },
    },
  },
};
```

### `ref`

A [React ref](https://react.dev/learn/manipulating-the-dom-with-refs), assigned to the root node of the DropZone.

```tsx copy {9}
const config = {
  components: {
    Example: {
      render: () => {
        const ref = useRef();

        return (
          <div>
            <DropZone zone="my-content" ref={ref} />
          </div>
        );
      },
    },
  },
};
```

### `style`

Provide a style attribute to the DropZone. The default DropZone styles will still be applied.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" style={{ display: "flex" }} />
          </div>
        );
      },
    },
  },
};
```

## React server components

By default, DropZones don't work with React server components as they rely on context.

Instead, you can use the [`renderDropZone` method](/docs/api-reference/configuration/component-config#propspuckrenderdropzone) passed to your component render function.

{/_ ===== ./docs/pages/docs/api-reference/components/field-label.mdx ===== _/}

---

## title: <FieldLabel>

import { ConfigPreview } from "../../../../components/Preview";
import { FieldLabel } from "@/puck";
import { Globe } from "lucide-react";

# \<FieldLabel\>

Render a styled `label` when creating [`custom` fields](/docs/api-reference/fields/custom).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: () => {
          return (
            <FieldLabel label="Title">
              <input
                style={{ background: "white", border: "1px solid black" }}
/>
</FieldLabel>
);
},
},
},
defaultProps: {
title: "Hello, world",
},
}}
/>

```tsx {1,4-6} copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel label="Title">
    <input />
  </FieldLabel>
);

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: MyCustomField,
        },
      },
    },
  },
};
```

## Props

| Param                     | Example                | Type             | Status   |
| ------------------------- | ---------------------- | ---------------- | -------- |
| [`label`](#label)         | `label: "Title"`       | String           | Required |
| [`children`](#children)   | `children: <div />`    | ReactNode        | -        |
| [`className`](#classname) | `className: "MyLabel"` | String           | -        |
| [`el`](#el)               | `el: false`            | "label" \| "div" | -        |
| [`icon`](#icon)           | `icon: <svg />`        | ReactNode        | -        |
| [`readOnly`](#readonly)   | `readOnly: false`      | Boolean          | -        |

## Required props

### `label`

The label string for the fields.

```tsx /label="Title"/ copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel label="Title">
    <input />
  </FieldLabel>
);

// ...
```

## Optional props

### `children`

A node to render inside the FieldLabel's internal `<label>` element. You can also define your input element as a sibling.

```tsx {5} copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel label="Title">
    <input />
  </FieldLabel>
);

// ...
```

### `className`

Define a custom class for the field label.

```tsx /className="MyClass"/ copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel className="MyClass" label="Title">
    <input />
  </FieldLabel>
);

// ...
```

### `el`

Specify whether to render a `label` or `div`. **Defaults to `"label"`**.

```tsx /el="div"/ copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel el="div" label="Title">
    <input />
  </FieldLabel>
);

// ...
```

### `icon`

Render an icon before the label text. Puck uses [lucide-react](https://lucide.dev/guide/packages/lucide-react) internally.

```tsx /icon={<Globe size="16" />}/ copy
import { FieldLabel } from "@measured/puck";
import { Globe } from "lucide-react";

const CustomField = () => (
  <FieldLabel icon={<Globe size="16" />} label="Title">
    <input />
  </FieldLabel>
);

// ...
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: () => {
          return (
            <FieldLabel label="Title" icon={<Globe size="16" />}>
              <input style={{ border: "1px solid black" }} />
</FieldLabel>
);
},
},
},
defaultProps: {
title: "Hello, world",
},
}}
/>

### `readOnly`

Indicate to the user that this field is in a read-only state by showing a padlock icon to the right of the text.

```tsx /readOnly/1 copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel label="Title" readOnly>
    <input readOnly />
  </FieldLabel>
);

// ...
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: () => {
          return (
            <div style={{ maxWidth: "max-content" }}>
<FieldLabel label="Title" readOnly>
<input style={{ border: "1px solid black" }} readOnly />
</FieldLabel>

</div>
);
},
},
},
defaultProps: {
title: "Hello, world",
},
}}
/>

{/_ ===== ./docs/pages/docs/api-reference/components/puck-components.mdx ===== _/}

---

## title: <Puck.Components>

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# \<Puck.Components\>

Render a draggable list of components based on the [user-defined components](/docs/api-reference/configuration/config#components) when composing a custom Puck UI. Respects the [`categories` API](/docs/api-reference/configuration/config#categories).

<PuckPreview
config={{
    components: {
      HeadingBlock: {},
      ParagraphBlock: {},
    },
  }}
data={{ root: { props: {} }, content: [] }}

> <Puck.Components />
> </PuckPreview>

```tsx {} showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Components />
    </Puck>
  );
}
```

## Props

This component doesn't accept any props.

{/_ ===== ./docs/pages/docs/api-reference/components/puck-fields.mdx ===== _/}

---

## title: <Puck.Fields>

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# \<Puck.Fields\>

Render the fields for the currently selected item in [`<Puck.Preview>`](/docs/api-reference/components/puck-preview) when composing a custom Puck UI.

<PuckPreview
config={{
    components: {
      HeadingBlock: {},
    },
  }}
data={{ root: { props: {} }, content: [] }}
style={{ padding: 4 }}

> <Puck.Fields />
> </PuckPreview>

```tsx {14} showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Fields />
    </Puck>
  );
}
```

## Props

| Param                       | Example             | Type    | Status |
| --------------------------- | ------------------- | ------- | ------ |
| [`wrapFields`](#wrapfields) | `wrapFields: false` | boolean | -      |

## Optional props

### `wrapFields`

Whether or not the top-level fields should be padded and separated by a a border. Defaults to `true`.

```tsx {6} copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Fields wrapFields={false} />
    </Puck>
  );
}
```

{/_ ===== ./docs/pages/docs/api-reference/components/puck-outline.mdx ===== _/}

---

## title: <Puck.Outline>

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# \<Puck.Outline\>

Render an interactive outline of the current data payload when composing a custom Puck UI.

<PuckPreview
config={{
    components: {
      HeadingBlock: { render: () => <div>Hello world</div> },
      ParagraphBlock: {},
    },
  }}
data={{
    root: { props: {} },
    content: [{ type: "HeadingBlock", props: { id: "HeadingBlock-123" } }],
  }}

> <Puck.Outline />
> {/_ Outline doesn't render unless Preview is rendered due to zone flushing _/}

  <div style={{ display: "none" }}>
    <Puck.Preview />
  </div>
</PuckPreview>

```tsx {12} showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Outline />
    </Puck>
  );
}
```

## Props

This component doesn't accept any props.

{/_ ===== ./docs/pages/docs/api-reference/components/puck-preview.mdx ===== _/}

---

## title: <Puck.Preview>

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# \<Puck.Preview\>

Render a drag-and-drop preview for the current data when composing a custom Puck UI.

<PuckPreview
config={{
    components: {
      HeadingBlock: {
        fields: {title: {type: 'text'}},
render: ({title}) => <div>{title}</div>
}
}
}}
data={{
    root: { props: {} },
    content: [{ type: "HeadingBlock", props: { id: "HeadingBlock-123", title: 'Hello, world' } }],
  }}

>

<Puck.Preview />
</PuckPreview>

```tsx {17} showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Preview />
    </Puck>
  );
}
```

## Props

| Param       | Example                    | Type   | Status |
| ----------- | -------------------------- | ------ | ------ |
| [`id`](#id) | `id: "my-preview-content"` | String | -      |

## Optional props

### `id`

A unique identifier for the preview frame. Default: `puck-preview`.

```tsx {6} copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Preview id="my-frame" />
    </Puck>
  );
}
```

{/_ ===== ./docs/pages/docs/api-reference/components/puck.mdx ===== _/}

---

## title: <Puck>

# \<Puck\>

Render the Puck editor.

```tsx copy
import { Puck } from "@measured/puck";

const config = {
  components: {},
};

const initialData = {
  content: [],
  root: {},
};

export function Editor() {
  return <Puck config={config} data={initialData} />;
}
```

## Props

| Param                                                 | Example                                            | Type                                                       | Status       |
| ----------------------------------------------------- | -------------------------------------------------- | ---------------------------------------------------------- | ------------ |
| [`config`](#config)                                   | `config: { components: {} }`                       | [Config](/docs/api-reference/configuration/config)         | Required     |
| [`data`](#data)                                       | `data: {}`                                         | [Data](/docs/api-reference/data-model/data)                | Required     |
| [`dnd`](#dnd)                                         | `dnd: {}`                                          | [DndConfig](#dnd-params)                                   | -            |
| [`children`](#children)                               | `children: <Puck.Preview />`                       | ReactNode                                                  | -            |
| [`fieldTransforms`](#fieldtransforms)                 | `fieldTransforms: {text: () => <div />}`           | [FieldTransforms](/docs/api-reference/field-transforms)    | -            |
| [`headerPath`](#headerpath)                           | `headerPath: "/my-page"`                           | String                                                     | -            |
| [`headerTitle`](#headertitle)                         | `headerTitle: "My Page"`                           | String                                                     | -            |
| [`iframe`](#iframe)                                   | `iframe: {}`                                       | [IframeConfig](#iframe-params)                             | -            |
| [`initialHistory`](#initialhistory)                   | `initialHistory: {}`                               | [InitialHistory](#initialhistory-params)                   | -            |
| [`metadata`](#metadata)                               | `metadata: {}`                                     | Object                                                     | -            |
| [`onAction()`](#onactionaction-appstate-prevappstate) | `onAction: (action, appState, prevAppState) => {}` | Function                                                   | -            |
| [`onChange()`](#onchangedata)                         | `onChange: (data) => {}`                           | Function                                                   | -            |
| [`onPublish()`](#onpublishdata)                       | `onPublish: async (data) => {}`                    | Function                                                   | -            |
| [`overrides`](#overrides)                             | `overrides: { header: () => <div /> }`             | [Overrides](/docs/api-reference/overrides)                 | Experimental |
| [`permissions`](#permissions)                         | `permissions: {}`                                  | [Plugin\[\]](/docs/api-reference/plugin)                   | Experimental |
| [`plugins`](#plugins)                                 | `plugins: [myPlugin]`                              | [Plugin\[\]](/docs/api-reference/plugin)                   | Experimental |
| [`ui`](#ui)                                           | `ui: {leftSideBarVisible: false}`                  | [AppState.ui](/docs/api-reference/data-model/app-state#ui) | -            |
| [`viewports`](#viewports)                             | `viewports: [{ width: 1440 }]`                     | [Viewport\[\]](#viewport-params)                           | -            |

## Required props

### `config`

An object describing the available components, fields and more. See the [`Config` docs](/docs/api-reference/configuration/config) for a full reference.

```tsx {4-17} copy
export function Editor() {
  return (
    <Puck
      config={{
        components: {
          HeadingBlock: {
            fields: {
              children: {
                type: "text",
              },
            },
            render: ({ children }) => {
              return <h1>{children}</h1>;
            },
          },
        },
      }}
      // ...
    />
  );
}
```

### `data`

The initial data to render. Cannot be changed once `<Puck>` has been mounted. See the [`Data` docs](/docs/api-reference/data-model/data) for a full reference.

```tsx {4-12} copy
export function Editor() {
  return (
    <Puck
      data={{
        content: [
          {
            props: { children: "Hello, world", id: "id" },
            type: "HeadingBlock",
          },
        ],
        root: {},
      }}
      // ...
    />
  );
}
```

## Optional props

### `children`

Render custom nodes to create [compositional interfaces](/docs/extending-puck/composition).

```tsx {4} copy
export function Editor() {
  return (
    <Puck /*...*/>
      <Puck.Preview />
    </Puck>
  );
}
```

### `dnd`

Configure drag-and-drop behavior.

#### dnd params

| Param                                     | Example                   | Type    | Status |
| ----------------------------------------- | ------------------------- | ------- | ------ |
| [`disableAutoScroll`](#disableautoscroll) | `disableAutoScroll: true` | boolean | -      |

##### `disableAutoScroll`

Disable auto-scroll when the user drags an item near the edge of the preview area.

### `fieldTransforms`

Specify transforms to modify field values before being passed to the editor canvas. Implements the [Field Transforms API](/docs/api-reference/field-transforms).

```tsx {4} copy
export function Editor() {
  return (
    <Puck
      fieldTransforms={{
        text: ({ value }) => <div>{value}</div>, // Wrap all text field values in a div
      }}
      // ...
    />
  );
}
```

### `headerPath`

Set a path to show after the header title

```tsx {4} copy
export function Editor() {
  return (
    <Puck
      headerPath="/my-page"
      // ...
    />
  );
}
```

### `headerTitle`

Set the title shown in the header

```tsx {4} copy
export function Editor() {
  return (
    <Puck
      headerTitle="My page"
      // ...
    />
  );
}
```

### `iframe`

Configure the iframe behaviour.

```tsx {4} copy
export function Editor() {
  return (
    <Puck
      iframe={{ enabled: false }}
      // ...
    />
  );
}
```

#### iframe params

| Param                           | Example                | Type    | Status |
| ------------------------------- | ---------------------- | ------- | ------ |
| [`enabled`](#enabled)           | `enabled: false`       | boolean | -      |
| [`waitForStyles`](#deferrender) | `waitForStyles: false` | boolean | -      |

##### `enabled`

Render the Puck preview within iframe. Defaults to `true`.

Disabling iframes will also disable [viewports](#viewports).

##### `waitForStyles`

Defer rendering of the Puck preview until the iframe styles have loaded, showing a spinner. Defaults to `true`.

### `initialHistory`

Sets the undo/redo Puck history state when using the `usePuck` [history API](/docs/api-reference/puck-api#history).

```tsx showLineNumbers copy {12-15}
const historyState = {
  data: {
    root: {
      props: { title: "My History" },
    },
  },
};

export function Editor() {
  return (
    <Puck
      initialHistory={{
        histories: [{ state: historyState }],
        index: 0,
      }}
      // ...
    />
  );
}
```

#### `initialHistory` params

| Param                       | Example             | Type                                                       | Status   |
| --------------------------- | ------------------- | ---------------------------------------------------------- | -------- |
| [`histories`](#histories)   | `histories: []`     | [History](/docs/api-reference/puck-api#history-params)\[\] | Required |
| [`index`](#index)           | `index: 2`          | Number                                                     | Required |
| [`appendData`](#appenddata) | `appendData: false` | Boolean                                                    | -        |

##### `histories`

An array of histories to reset the Puck state history state to.

##### `index`

The index of the histories to set the user to.

##### `appendData`

Append the Puck [`data`](#data) prop onto the end of [`histories`](#histories). Defaults to `true`.

When `false`, the Puck `data` prop will be ignored but you must specify at least one item in the `histories` array.

### `onAction(action, appState, prevAppState)`

Callback that triggers when Puck dispatches an [action](https://puckeditor.com/docs/api-reference/actions), like `insert` or `set`. Use this to track changes, perform side effects, or sync with external systems.

Receives three arguments:

1. `action`: The action that was dispatched
2. `appState`: The new [`AppState`](/docs/api-reference/data-model/app-state) after the action was applied
3. `prevAppState`: The previous [`AppState`](/docs/api-reference/data-model/app-state) before the action was applied

```tsx {4-8} copy
export function Editor() {
  return (
    <Puck
      onAction={(action, appState, prevAppState) => {
        if (action.type === "insert") {
          console.log("New component was inserted", appState);
        }
      }}
      // ...
    />
  );
}
```

### `metadata`

An object containing additional data provided to each component's [`render`](/docs/api-reference/configuration/component-config#renderprops) and [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) functions.

```tsx {4,8} copy
export function Editor() {
  return (
    <Puck
      metadata={{ title: "Hello, world" }}
      config={{
        HeadingBlock: {
          render: ({ puck }) => {
            return <h1>{puck.metadata.title}</h1>; // "Hello, world"
          },
        },
      }}
      // ...
    />
  );
}
```

### `onChange(data)`

Callback that triggers when the user makes a change.

Receives a single [`Data`](/docs/api-reference/data-model/data) arg.

```tsx {4-6} copy
export function Editor() {
  return (
    <Puck
      onChange={(data) => {
        console.log("Puck data was updated", data);
      }}
      // ...
    />
  );
}
```

### `onPublish(data)`

Callback that triggers when the user hits the "Publish" button. Use this to save the Puck data to your database.

Receives a single [`Data`](/docs/api-reference/data-model/data) arg.

```tsx {4-9} copy
export function Editor() {
  return (
    <Puck
      onPublish={async (data) => {
        await fetch("/my-api", {
          method: "post",
          body: JSON.stringify({ data }),
        });
      }}
      // ...
    />
  );
}
```

### `overrides`

An [`Overrides`](/docs/api-reference/overrides) object defining custom render methods for various parts of the Puck UI.

```tsx {4-6} copy
export function Editor() {
  return (
    <Puck
      overrides={{
        header: () => <div />,
      }}
      // ...
    />
  );
}
```

### `permissions`

Set the global [permissions](/docs/api-reference/permissions) for the Puck instance to toggle Puck functionality.

```tsx {4-6} copy
export function Editor() {
  return (
    <Puck
      permissions={{
        delete: false, // Prevent deletion of all components
      }}
      // ...
    />
  );
}
```

### `plugins`

An array of plugins to enhance Puck's behaviour. See the [Plugin API reference](/docs/api-reference/plugin).

```tsx {6} copy
import headingAnalyzer from "@measured/puck-plugin-heading-analyzer";

export function Editor() {
  return (
    <Puck
      plugins={[headingAnalyzer]}
      // ...
    />
  );
}
```

### `ui`

Set the initial application UI state. See [`AppState.ui`](/docs/api-reference/data-model/app-state#ui).

```tsx {5} copy
export function Editor() {
  return (
    <Puck
      // Hide the left side bar by default
      ui={{ leftSideBarVisible: false }}
      // ...
    />
  );
}
```

### `viewports`

Configure the viewports available to the user, rendered as an iframe. Puck will select the most appropriate initial viewport based on the user's window size, unless otherwise specified via the [`ui`](#ui) prop.

```tsx {4-8} copy
export function Editor() {
  return (
    <Puck
      viewports={[
        {
          width: 1440,
        },
      ]}
      // ...
    />
  );
}
```

#### Viewport params

| Param               | Example           | Type                                                     | Status   |
| ------------------- | ----------------- | -------------------------------------------------------- | -------- |
| [`width`](#width)   | `width: 1440`     | number                                                   | Required |
| [`height`](#height) | `height: 968`     | number \| `"auto"`                                       | -        |
| [`icon`](#icon)     | `icon: "Monitor"` | `"Smartphone"` \| `"Tablet"` \| `"Monitor"` \| ReactNode | -        |
| [`label`](#label)   | `label: "iPhone"` | string                                                   | -        |

##### `width`

The width of the viewport.

##### `height`

An optional height for the viewport. Defaults to `auto`, which will fit to the window.

##### `label`

An optional label for the viewport. This is used for browser tooltip.

##### `icon`

The icon to show in the viewport switcher. Can be:

- `"Smartphone"`
- `"Tablet"`
- `"Monitor"`
- ReactNode

Puck uses [Lucide icons](https://lucide.dev/icons/). You can use [lucide-react](https://lucide.dev/guide/packages/lucide-react) to choose a similar icon, if desired.

#### Default viewports

By default, Puck exposes small, medium and large viewports based on common viewport sizes.

```json
[
  {
    "width": 360,
    "height": "auto",
    "icon": "Smartphone",
    "label": "Small"
  },
  {
    "width": 768,
    "height": "auto",
    "icon": "Tablet",
    "label": "Medium"
  },
  {
    "width": 1280,
    "height": "auto",
    "icon": "Monitor",
    "label": "Large"
  }
]
```

{/_ ===== ./docs/pages/docs/api-reference/components/render.mdx ===== _/}

---

## title: <Render>

# \<Render\>

Render a [`Data`](/docs/api-reference/data-model/data) object for a given [`Config`](/docs/api-reference/configuration/config).

```tsx copy showLineNumbers
import { Render } from "@measured/puck";

export function Example() {
  return <Render config={config} data={data} />;
}
```

## Props

| Param                   | Example                      | Type                                        | Status   |
| ----------------------- | ---------------------------- | ------------------------------------------- | -------- |
| [`config`](#config)     | `config: { components: {} }` | [Config](/docs/api-reference/config)        | Required |
| [`data`](#data)         | `data: {}`                   | [Data](/docs/api-reference/data-model/data) | Required |
| [`metadata`](#metadata) | `metadata: {}`               | [Metadata](/docs/api-reference/metadata)    | -        |

## Required props

### `config`

An object describing the available components, fields and more. See the [`Config` docs](/docs/api-reference/configuration/config) for a full reference.

```tsx {4-17} copy
export function Example() {
  return (
    <Render
      config={{
        components: {
          HeadingBlock: {
            fields: {
              children: {
                type: "text",
              },
            },
            render: ({ children }) => {
              return <h1>{children}</h1>;
            },
          },
        },
      }}
      // ...
    />
  );
}
```

### `data`

The data to render against the provided config. See the [`Data` docs](/docs/api-reference/data-model/data) for a full reference.

```tsx {4-12} copy
export function Example() {
  return (
    <Render
      data={{
        content: [
          {
            props: { children: "Hello, world", id: "id" },
            type: "HeadingBlock",
          },
        ],
        root: {},
      }}
      // ...
    />
  );
}
```

### `metadata`

An object containing additional data provided to each component's [`render`](/docs/api-reference/configuration/component-config#renderprops) and [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) functions.

```tsx {4,8} copy
export function Example() {
  return (
    <Render
      metadata={{ title: "Hello, world" }}
      config={{
        HeadingBlock: {
          render: ({ puck }) => {
            return <h1>{puck.metadata.title}</h1>; // "Hello, world"
          },
        },
      }}
      // ...
    />
  );
}
```

{/_ ===== ./docs/pages/docs/api-reference/configuration.mdx ===== _/}

# Configuration

- [Config](configuration/config) - The main configuration object describing what Puck can render.
- [ComponentConfig](configuration/component-config) - The configuration of each component defined in the main config.

{/_ ===== ./docs/pages/docs/api-reference/configuration/component-config.mdx ===== _/}

---

## title: ComponentConfig

import { ConfigPreview, PuckPreview } from "@/docs/components/Preview";
import { Drawer } from "@/puck";

# ComponentConfig

The configuration for each component defined in [`Config`](/docs/api-reference/configuration/config).

```tsx {3-10} copy
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      render: ({ title }) => <h1>{title}</h1>,
    },
  },
};
```

## Params

| Param                                                    | Example                                         | Type     | Status   |
| -------------------------------------------------------- | ----------------------------------------------- | -------- | -------- |
| [`render()`](#renderprops)                               | `render: () => <div />`                         | Function | Required |
| [`fields`](#fields)                                      | `fields: { title: { type: "text"} }`            | Object   | -        |
| [`defaultProps`](#defaultprops)                          | `defaultProps: { title: "Hello, world" }`       | Object   | -        |
| [`inline`](#inline)                                      | `inline: true`                                  | Boolean  | -        |
| [`label`](#label)                                        | `label: "Heading Block"`                        | String   | -        |
| [`metadata`](#metadata)                                  | `metadata: {}`                                  | Object   | -        |
| [`permissions()`](#permissions)                          | `permissions: { delete: false }`                | Object   | -        |
| [`resolveData()`](#resolvedatadata-params)               | `resolveData: async ({ props }) => ({ props })` | Object   | -        |
| [`resolveFields()`](#resolvefieldsdata-params)           | `resolveFields: async ({ props }) => ({})`      | Object   | -        |
| [`resolvePermissions()`](#resolvepermissionsdata-params) | `resolvePermissions: async ({ props }) => ({})` | Object   | -        |

## Required params

### `render(props)`

A render function to render your component. Receives props as defined in `fields`, and some internal Puck props.

```tsx {4} copy
const config = {
  components: {
    HeadingBlock: {
      render: () => <h1>Hello, world</h1>,
    },
  },
};
```

#### Render props

| Arg                                             | Example       | Type     |
| ----------------------------------------------- | ------------- | -------- |
| [`id`](#id)                                     | `button-1234` | String   |
| [`puck.dragRef`](#puckdragref)                  | `null`        | Function |
| [`puck.isEditing`](#puckisediting)              | `false`       | Boolean  |
| [`puck.metadata`](/docs/api-reference/metadata) | `{}`          | Object   |
| [`puck.renderDropZone`](#puckrenderdropzone)    | `() => {}`    | Function |
| [`...props`](#props)                            | `{}`          | Object   |

##### `id`

A unique identifier for the component. Auto-generated by default.

##### `puck.dragRef`

A `ref` that tells Puck which element is draggable. Apply this to your components when using the [`inline` parameter](#inline) for advanced CSS layouts.

```tsx {5} /renderDropZone/1 copy
const config = {
  components: {
    Example: {
      inline: true,
      render: ({ puck: { dragRef } }) => {
        return <div ref={dragRef}>Hello, world</div>;
      },
    },
  },
};
```

##### `puck.isEditing`

A boolean describing whether or not this component is being rendered in the `<Puck>` component.

##### `puck.metadata`

An object containing the global metadata provided to the [`<Puck>`](/docs/api-reference/components/puck#metadata) or [`<Render>`](/docs/api-reference/components/render#metadata) component, merged with any metadata defined in this [component's config](#metadata).

```tsx {5} /renderDropZone/1 copy
const config = {
  components: {
    Example: {
      inline: true,
      render: ({ text, puck: { metadata } }) => {
        return <div>Hello, {metadata.text || text}</div>;
      },
    },
  },
};
```

##### `puck.renderDropZone`

A render method that creates a [`<DropZone>`](/docs/api-reference/components/drop-zone) for creating nested components. Use this method instead of the `<DropZone>` when implementing React server components.

```tsx {5} /renderDropZone/1 copy
const config = {
  components: {
    Example: {
      render: ({ puck: { renderDropZone } }) => {
        return <div>{renderDropZone({ zone: "my-content" })}</div>;
      },
    },
  },
};
```

##### `...props`

The remaining props are provided by the user-defined [fields](#fields).

## Optional params

### `fields`

An object describing which [`Field`](/docs/api-reference/fields) to show for each prop passed to the component.

```tsx {4-8} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      render: ({ title }) => <h1>{title}</h1>,
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
},
}}
/>

### `defaultProps`

Default props to apply to a new instance of the component.

```tsx {9} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      defaultProps: { title: "Hello, world" },
      render: ({ title }) => <h1>{title}</h1>,
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
},
}}
/>

### `inline`

Render your component without a wrapping element. Use this to [create advanced CSS layouts](/docs/integrating-puck/multi-column-layouts#advanced-css-layouts). Defaults to `false`.

When `true`, you must to specify which item is draggable via the [`puck.dragRef` prop](#puckdragref).

```tsx {4-5} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      inline: true,
      render: ({ puck }) => <h1 ref={puck.dragRef}>Hello, World</h1>,
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    inline: true,
    render: ({ title, puck }) => {
      return (
        <p style={{ margin: 0 }} ref={puck.dragRef}>
{title}

</p>
);
},
}}
/>

### `label`

A label to show when referring to your component within the Puck editor. Defaults to the key of your component.

```tsx {4} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      label: "Heading Block",
      render: () => <h1>Hello, World</h1>,
    },
  },
};
```

<PuckPreview config={{}} data={{ root: { props: {} }, content: [] }}>
<Drawer>
<Drawer.Item name="Heading Block" />
</Drawer>
</PuckPreview>

### `metadata`

An object containing any additional values. Provided to their [`render`](#renderprops) and [`resolveData`](#resolvedatadata-params) functions.

Will be merged with the global `metadata` prop provided to the [`<Puck>`](/docs/api-reference/components/puck#metadata) or [`<Render>`](/docs/api-reference/components/render#metadata) component, overriding any keys with the same name.

```tsx {4-7}
const config = {
  components: {
    HeadingBlock: {
      metadata: {
        title: "Hello, world",
      },
      render: ({ puck }) => <h1>{puck.metadata.title}</h1>,
    },
  },
};
```

### `permissions`

Set the [permissions](/docs/api-reference/permissions) for all instances of a component to toggle functionality. Inherits [global permissions](/docs/api-reference/components/puck/#permissions).

```tsx {4-6} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      permissions: {
        delete: false, // Disable deletion of all HeadingBlock instances
      },
      render: () => <h1>Hello, World</h1>,
    },
  },
};
```

### `resolveData(data, params)`

Dynamically change the props and set fields as read-only. Supports asynchronous calls.

This function is triggered when [`<Puck>`](/docs/api-reference/components/puck) renders, when a field is changed, or when the [`resolveAllData` function](/docs/api-reference/functions/resolve-all-data) is called.

```tsx {9-14} copy filename="Example mapping 'title' to 'resolvedTitle'"
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      resolveData: async ({ props }) => {
        return {
          props: { resolvedTitle: props.title },
          readOnly: { resolvedTitle: true },
        };
      },
      render: ({ resolvedTitle }) => <h1>{resolvedTitle}</h1>,
    },
  },
};
```

<ConfigPreview
label='Try changing the "title" field'
componentConfig={{
    fields: {
      title: {
        type: "text",
      },
      resolvedTitle: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    resolveData: ({ props }) => {
      return {
        props: { resolvedTitle: props.title },
        readOnly: { resolvedTitle: true },
      };
    },
    render: ({ resolvedTitle }) => {
      return <p style={{ margin: 0 }}>{resolvedTitle}</p>;
},

}}
/>

#### Args

| Prop     | Example                                                  | Type   |
| -------- | -------------------------------------------------------- | ------ |
| `data`   | `{ props: { title: "Hello, world" }, readOnly: {} }`     | Object |
| `params` | `{ changed: { title: true }, metadata: { foo: "bar" } }` | Object |

##### `data.props`

The current props for the component.

```tsx copy /props/1,3
const resolveData = async ({ props }) => {
  return {
    props: { resolvedTitle: props.title },
  };
};
```

##### `data.readOnly`

The fields currently set to read-only for this component.

##### `params.changed`

An object describing which props have changed on this component since the last time `resolveData` was called.

```tsx copy {2-4} /changed/1 filename="Example only updating 'resolvedTitle' when 'title' changes"
const resolveData = async ({ props }, { changed }) => {
  if (!changed.title) {
    return { props };
  }

  return {
    props: { resolvedTitle: props.title },
  };
};
```

##### `params.lastData`

The data object from the previous run of this function.

##### `params.metadata`

An object containing the global metadata provided to the [`<Puck>`](/docs/api-reference/components/puck#metadata) or [`<Render>`](/docs/api-reference/components/render#metadata) component, merged with any metadata defined in this [component's config](#metadata).

```tsx copy {2-4} /changed/1 filename="Example only updating 'resolvedTitle' when 'title' changes"
const resolveData = async ({ props }, { metadata }) => {
  return {
    props: { title: metadata.title || props.title },
  };
};
```

##### `params.trigger`

The event that triggered this resolveData call. One of:

- `insert` - the component was inserted
- `replace` - the component was replaced, such as when a field value is changed
- `load` - the Puck editor was loaded
- `force` - an execution was forced via the [`resolveAllData` function](/docs/api-reference/functions/resolve-all-data)

#### Returns

| Prop   | Example                                              | Type   |
| ------ | ---------------------------------------------------- | ------ |
| `data` | `{ props: { title: "Hello, world" }, readOnly: {} }` | Object |

##### `data.props`

A partial props object containing modified props. Will be spread into the other props.

```tsx copy {3} filename="Example only updating resolvedTitle when title changes"
const resolveData = async ({ props }) => {
  return {
    props: { resolvedTitle: props.title },
  };
};
```

##### `data.readOnly`

A partial object describing fields to set as readonly. Will be spread into the existing readOnly state.

```tsx copy {4} filename="Example only updating resolvedTitle when title changes"
const resolveData = async ({ props }) => {
  return {
    props: { resolvedTitle: props.title },
    readOnly: { resolvedTitle: true }, // Make the `resolvedTitle` field read-only
  };
};
```

### `resolveFields(data, params)`

Dynamically set the fields for this component. Supports asynchronous calls.

This function is triggered when the component data changes.

```tsx {4-25} copy filename="Example changing one field based on another"
const config = {
  components: {
    MyComponent: {
      resolveFields: (data) => {
        const fields = {
          drink: {
            type: "radio",
            options: [
              { label: "Water", value: "water" },
              { label: "Orange juice", value: "orange-juice" },
            ],
          },
        };

        if (data.props.drink === "water") {
          return {
            ...fields,
            waterType: {
              // ... Define field
            },
          };
        }

        return fields;
      },
      // ...
    },
  },
};
```

<ConfigPreview
label='Try changing the "drink" field'
componentConfig={{
resolveFields: (data) => {
const fields = {
drink: {
type: "radio",
options: [
{ label: "Water", value: "water" },
{ label: "Orange juice", value: "orange-juice" },
],
},
};

      if (data.props.drink === "water") {
        return {
          ...fields,
          waterType: {
            type: "radio",
            options: [
              { label: "Still", value: "still" },
              { label: "Sparkling", value: "sparkling" },
            ],
          },
        };
      }

      return fields;
    },
    defaultProps: {
      drink: "water",
      waterType: "still",
    },
    render: ({ drink, waterType }) => (
      <p>
        {drink}
        {drink === "water" ? ` (${waterType})` : ""}
      </p>
    ),

}}
/>

#### Args

| Prop     | Example                                                                               | Type   |
| -------- | ------------------------------------------------------------------------------------- | ------ |
| `data`   | `{ props: { title: "Hello, world" }, readOnly: {} }`                                  | Object |
| `params` | `{ appState: {}, changed: {}, fields: {}, lastData: {}, lastFields: {}, parent: {} }` | Object |

##### `data.props`

The current props for the selected component.

##### `data.readOnly`

The fields currently set to read-only for this component.

##### `params.appState`

An object describing the [AppState](/docs/api-reference/data-model/app-state).

##### `params.changed`

An object describing which props have changed on this component since the last time this function was called.

```tsx copy {2-4} /changed/1 filename="Example only updating the fields when 'fieldType' changes"
const resolveFields = async ({ props }, { changed, lastFields }) => {
  if (!changed.fieldType) {
    return lastFields;
  }

  return {
    title: {
      type: fieldType,
    },
  };
};
```

##### `params.fields`

The static fields for this component as defined by [`fields`](#fields).

##### `params.lastData`

The data object from the previous run of this function.

##### `params.lastFields`

The last fields object created by the previous run of this function.

##### `params.metadata`

An object containing the global metadata provided to the [`<Puck>`](/docs/api-reference/components/puck#metadata) or [`<Render>`](/docs/api-reference/components/render#metadata) component, merged with any metadata defined in this [component's config](#metadata).

##### `params.parent`

The parent data object if this item is within a [DropZone](/docs/api-reference/components/drop-zone).

### `resolvePermissions(data, params)`

Dynamically set the [permissions](/docs/api-reference/permissions) for this component to toggle functionality. Can be used to control the permissions on a specific component instance. Inherits [`permissions`](#permissions). Supports asynchronous calls.

This function is triggered when the component data changes.

```tsx {4-12} copy filename="Setting permissions for a specific instance" showLineNumbers
const config = {
  components: {
    MyComponent: {
      resolvePermissions: (data, { permissions }) => {
        if (data.props.id === "MyComponent-1234") {
          return {
            delete: false, // Disable deletion on component with id MyComponent-1234
          };
        }

        return { permissions }; // Fallback to inherited permissions
      },
      // ...
    },
  },
};
```

#### Args

| Prop     | Example                                                                             | Type   |
| -------- | ----------------------------------------------------------------------------------- | ------ |
| `data`   | `{ props: { title: "Hello, world" }, readOnly: {} }`                                | Object |
| `params` | `{ appState: {}, changed: {}, permissions: {}, lastData: {}, lastPermissions: {} }` | Object |

##### `data.props`

The current props for the selected component.

##### `data.readOnly`

The fields currently set to read-only for this component.

##### `params.appState`

An object describing the [AppState](/docs/api-reference/data-model/app-state).

##### `params.changed`

An object describing which props have changed on this component since the last time this function was called. This helps prevent duplicate calls when making async operations.

```tsx copy {2-4} /changed/1 filename="Example only updating the permissions when 'example' prop changes"
const resolvePermissions = async ({ props }, { changed, lastPermissions }) => {
  if (!changed.example) {
    return lastPermissions; // Return the last permissions unless the `example` prop has changed
  }

  return await expensiveAsyncOperation();
};
```

##### `params.permissions`

The static fields for this component as defined by [`permissions`](#permissions).

##### `params.lastData`

The data object from the previous run of this function.

##### `params.lastPermissions`

The last permissions object created by the previous run of this function.

#### Returns

A [`fields`](#fields) object.

{/_ ===== ./docs/pages/docs/api-reference/configuration/config.mdx ===== _/}

# Config

The main configuration object describing what Puck can render.

```tsx copy
const config = {
  components: {
    HeadingBlock: {
      fields: {
        children: {
          type: "text",
        },
      },
      render: ({ children }) => {
        return <h1>{children}</h1>;
      },
    },
  },
};
```

## Params

| Param                       | Example                                                        | Type                                                                    | Status   |
| --------------------------- | -------------------------------------------------------------- | ----------------------------------------------------------------------- | -------- |
| [`components`](#components) | `components: { HeadingBlock: {{ render: () => <h1 /> } }`      | Object                                                                  | Required |
| [`root`](#root)             | `root: { render: () => <div /> }`                              | [`ComponentConfig`](/docs/api-reference/configuration/component-config) | -        |
| [`categories`](#categories) | `categories: { typography: { components: ["HeadingBlock"] } }` | Object                                                                  | -        |

## Required params

### `components`

An object describing the components available to Puck. Each component definition implements the [`ComponentConfig` API](/docs/api-reference/configuration/component-config).

```tsx {2-13} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      fields: {
        children: {
          type: "text",
        },
      },
      render: ({ children }) => {
        return <h1>{children}</h1>;
      },
    },
  },
};
```

## Optional params

### `root`

An object describing the root of your component tree. This component wraps the rest of your components. Implements the [`ComponentConfig` API](/docs/api-reference/configuration/component-config).

- You must return children to render the default content.

```tsx {2-6} copy showLineNumbers
const config = {
  root: {
    render: ({ children }) => {
      return <div>{children}</div>;
    },
  },
  // ...
};
```

### `categories`

An object describing categories for your components. Will be used to group the components in the left side-bar.

```tsx {2-6} copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock"],
    },
  },
  // ...
};
```

#### `categories[key].components`

An array of components in this category.

- Must use names of [`components`](#components).
- A component can appear in more than one category.

#### `categories[key].title`

The user-facing title for the category. Will use the `category` key if not provided.

#### `categories[key].visible`

A boolean describing whether or not the category should be visible in the side bar. **Defaults to `true`**.

#### `categories[key].defaultExpanded`

A boolean describing whether or not the category should be expanded by default in the side bar. **Defaults to `true`**.

#### `categories["other"]`

The default category for all uncategorized components. Receives all other categories params.

{/_ ===== ./docs/pages/docs/api-reference/data-model.mdx ===== _/}

# Data Model

The Puck data model

- [AppState](data-model/app-state) - Puck's internal state.
- [ComponentData](data-model/component-data) - The data model for each component instance.
- [Data](data-model/data) - The data model produced by Puck for a page.
- [RootData](data-model/root-data) - The data model for the root data.

{/_ ===== ./docs/pages/docs/api-reference/data-model/app-state.mdx ===== _/}

---

## title: AppState

import { Callout } from "nextra/components";

# `AppState`

<Callout>
  The application state is unstable and is likely to experience breaking
  changes.
</Callout>

The internal state of the [`<Puck>`](/docs/api-reference/components/puck) component.

## `data`

The current [`Data`](/docs/api-reference/data-model/data) payload being managed by Puck.

## `ui`

The current state of the Puck editor interface.

| Param                                           | Example                                               | Type                          |
| ----------------------------------------------- | ----------------------------------------------------- | ----------------------------- |
| [`arrayState`](#uiarraystate)                   | `{}`                                                  | Object                        |
| [`componentList`](#uicomponentlist)             | `{ typography: { components: [ "HeadingBlock" ] } }`  | Object                        |
| [`field.focus`](#fieldfocus)                    | `"title"`                                             | String                        |
| [`isDragging`](#isdragging)                     | `false`                                               | Boolean                       |
| [`itemSelector`](#uiitemselector)               | `{ index: 0, zone: "my-content" }`                    | [ItemSelector](item-selector) |
| [`leftSideBarVisible`](#uileftsidebarvisible)   | `false`                                               | Boolean                       |
| [`leftSideBarWidth`](#uileftsidebarwidth)       | `200`                                                 | Number                        |
| [`previewMode`](#uipreviewmode)                 | `"edit"`                                              | String                        |
| [`rightSideBarVisible`](#uirightsidebarvisible) | `false`                                               | Boolean                       |
| [`rightSideBarWidth`](#uirightsidebarwidth)     | `200`                                                 | Number                        |
| [`viewports`](#uiviewports)                     | `{ controlsVisible: true, current: {}, options: [] }` | Object                        |

---

### `ui.arrayState`

An object describing the internal state of array items

---

### `ui.componentList`

An object describing the component drawer. Similar shape to the [categories API](/docs/api-reference/configuration/config#categories)

#### `ui.componentList[key].components`

Array containing the names of components in this category.

#### `ui.componentList[key].title`

Title of the category.

#### `ui.componentList[key].visible`

Whether or not the category is visible in the side bar.

#### `ui.componentList[key].expanded`

Whether or not the category is expanded in the side bar.

---

### `ui.field.focus`

The name of the currently focused field.

---

### `ui.isDragging`

A boolean stating whether or not the user is currently dragging a component.

---

### `ui.itemSelector`

An [`ItemSelector`](item-selector) for the currently selected item.

---

### `ui.leftSideBarVisible`

Whether or not the left side bar is visible.

---

### `ui.leftSideBarWidth`

Current width of the left side bar in pixels.

---

### `ui.previewMode`

The mode for the preview area, controlling whether or not the user can interact with the underlying component. Accepts the following values:

- **`"edit"` (default)**: Components can be dragged and modified. An overlay prevents interaction with the underlying component.
- **`"interactive"`**: Editing functionality is disabled. The user can interact with the underlying component.

Puck does not currently provide the UI to control this value, but it can be toggled via the `cmd+i` or `ctrl+i` hotkeys.

---

### `ui.rightSideBarVisible`

Whether or not the right side bar is visible.

---

### `ui.rightSideBarWidth`

Current width of the right side bar in pixels.

---

### `ui.viewports`

| Param                                            | Example                           | Type                                                                 |
| ------------------------------------------------ | --------------------------------- | -------------------------------------------------------------------- |
| [`controlsVisible`](#uiviewportscontrolsvisible) | `false`                           | Boolean                                                              |
| [`current`](#uiviewportscurrent)                 | `{ width: 1440, height: "auto" }` | Object                                                               |
| [`options`](#uiviewportsoptions)                 | `[]`                              | [Viewports\[\]](/docs/api-reference/components/puck#viewport-params) |

#### `ui.viewports.controlsVisible`

Whether or not the viewport controls are visible.

#### `ui.viewports.current`

The currently selected viewport.

| Param                                 | Example  | Type               |
| ------------------------------------- | -------- | ------------------ |
| [`width`](#uiviewportscurrentwidth)   | `1440`   | Number             |
| [`height`](#uiviewportscurrentheight) | `"auto"` | Number \| `"auto"` |

##### `ui.viewports.current.width`

The width of the current viewport.

##### `ui.viewports.current.height`

The height of the current viewport.

#### `ui.viewports.options`

The available viewport options, as provided via the [`viewports` API](/docs/api-reference/components/puck#viewports).

{/_ ===== ./docs/pages/docs/api-reference/data-model/component-data.mdx ===== _/}

---

## title: ComponentData

# `ComponentData`

An object representing an instance of a component.

```json
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234",
    "title": "Hello, world"
  }
}
```

## Params

| Param                   | Example                                         | Type   | Status   |
| ----------------------- | ----------------------------------------------- | ------ | -------- |
| [`type`](#type)         | `type: "HeadingBlock"`                          | String | Required |
| [`props`](#props)       | `props: { id: "12345", title: "Hello, world" }` | Object | Required |
| [`readOnly`](#readonly) | `readOnly: { title: true }`                     | Object | -        |

### Required params

#### `type`

The type of the component, which tells Puck to run the [`render()`](/docs/api-reference/configuration/component-config#renderprops) method for the component of the [same key](/docs/api-reference/configuration/config#components).

#### `props`

The props stored based on the [`component config`](/docs/api-reference/configuration/component-config) that Puck will pass to the [`render()`](/docs/api-reference/configuration/component-config#renderprops) method for the component.

```json {3-6} copy
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234", // Auto-generated
    "title": "Hello, world"
  }
}
```

Requires a unique `id` prop to be defined.

### Optional params

#### `readOnly`

An object describing which fields are set to [read-only](/docs/api-reference/configuration/component-config#datareadonly-1).

```json {7-9} copy
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234",
    "title": "Hello, world"
  },
  "readOnly": {
    "title": true
  }
}
```

{/_ ===== ./docs/pages/docs/api-reference/data-model/data.mdx ===== _/}

import { Callout } from "nextra/components";

# `Data`

An object produced by Puck describing the shape of content.

```json copy
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234",
        "title": "Hello, world"
      }
    }
  ],
  "root": { "props": { "title": "Puck Example" } },
  "zones": {}
}
```

## Params

| Param                 | Example                                  | Type                                                             | Status   |
| --------------------- | ---------------------------------------- | ---------------------------------------------------------------- | -------- |
| [`content`](#content) | `content: []`                            | [ComponentData](/docs/api-reference/data-model/component-data)[] | Required |
| [`root`](#root)       | `root: { props: { title: "My page" } }`  | [RootData](/docs/api-reference/root-data)                        | Required |
| [`zones`](#zones)     | `zones: { "HeadingBlock-123:zone": [] }` | Object                                                           | -        |

### `content`

An array of [ComponentData](/docs/api-reference/data-model/component-data) objects representing the component instances in the default content region.

```json {2-9} copy
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234",
        "title": "Hello, world"
      }
    }
  ],
  "root": {},
  "zones": {}
}
```

### `root`

An object describing data for the [`root` config](/docs/api-reference/configuration/config#root). An instance of [`RootData`](/docs/api-reference/root-data).

```json {3-7} copy
{
  "content": [],
  "root": {
    "props": {
      "title": "My page"
    }
  },
  "zones": {}
}
```

### `zones`

<Callout>
  This parameter will soon be deprecated, as DropZones have been replaced by
  [`slot` fields](/docs/api-reference/fields/slots). For migration notes, see
  [these docs](/docs/guides/migrations/dropzones-to-slots).
</Callout>

An object describing nested content regions for each [DropZone](/docs/api-reference/components/drop-zone).

#### `zones[zoneKey]`

An array of [ComponentData](/docs/api-reference/data-model/component-data) objects representing the components instances in a particular DropZone.

`zoneKey` is a compound of the component `id` and [DropZone `zone`](/docs/api-reference/components/drop-zone#zone).

```json {5-13} copy showLineNumbers
{
  "content": [],
  "root": {},
  "zones": {
    "HeadingBlock-1234:my-content": [
      {
        "type": "HeadingBlock",
        "props": {
          "id": "HeadingBlock-1234",
          "title": "Hello, world"
        }
      }
    ]
  }
}
```

{/_ ===== ./docs/pages/docs/api-reference/data-model/item-selector.mdx ===== _/}

---

## title: ItemSelector

import { Callout } from "nextra/components";

# `ItemSelector`

An object describing the location of an item in the Puck [data](data).

```json copy
{
  "index": 0,
  "zone": "Flex-123:children" // The "children" slot field in the component with id "Flex-123"
}
```

## Params

| Param             | Example                       | Type   | Status   |
| ----------------- | ----------------------------- | ------ | -------- |
| [`index`](#index) | `index: 0`                    | Number | Required |
| [`zone`](#zone)   | `zone: "Flex-123:children" }` | String | -        |

### `index`

The index of the item.

### `zone`

An optional string representing the location of the item. It is a concatenation of two values, joined with a colon (`:`):

1. The id of the parent component
2. The name of the [slot field](/docs/api-reference/fields/slot) or [DropZone `zone`](/docs/api-reference/components/drop-zone#zone) value

The root of the payload is represented by the `root` id. The default content is represented by `default-zone`. When not provided, `zone` will contain the value `root:default-zone`, injecting data into [`content`](/docs/api-reference/data-model/data#content)

<Callout>
  DropZones have been replaced by [`slot`
  fields](/docs/api-reference/fields/slots). For migration notes, see [these
  docs](/docs/guides/migrations/dropzones-to-slots).
</Callout>

{/_ ===== ./docs/pages/docs/api-reference/data-model/root-data.mdx ===== _/}

---

## title: RootData

# `RootData`

An object representing the root data. Similar to [`ComponentData`](/docs/api-reference/data-model/component-data).

```json
{
  "props": {
    "title": "Hello, world"
  }
}
```

## Params

| Param                          | Example                            | Type   | Status   |
| ------------------------------ | ---------------------------------- | ------ | -------- |
| [`props`](#contentprops)       | `props: { title: "Hello, world" }` | Object | Required |
| [`readOnly`](#contentreadonly) | `readOnly: { title: true }`        | Object | -        |

### Required params

#### `type`

The type of the component, which tells Puck to run the [`render()`](/docs/api-reference/configuration/component-config#renderprops) method for the component of the [same key](/docs/api-reference/config#components).

#### `props`

The props stored based on the [`component config`](/docs/api-reference/configuration/component-config) that Puck will pass to the [`render()`](/docs/api-reference/configuration/component-config#renderprops) method for the component of the [same key](/docs/api-reference/config#components).

```json {3-6} copy
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234",
    "title": "Hello, world"
  }
}
```

Requires `id` unless used for [`root`](/docs/api-reference/data-model/data#root).

### Optional params

#### `readOnly`

An object describing which fields are set to [read-only](/docs/api-reference/configuration/component-config#datareadonly-1).

```json {7-9} copy
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234",
    "title": "Hello, world"
  },
  "readOnly": {
    "title": true
  }
}
```

{/_ ===== ./docs/pages/docs/api-reference/field-transforms.mdx ===== _/}

---

## title: FieldTransforms

# FieldTransforms

Transform the data for each [field type](/docs/api-reference/fields) before rendering in the editor.

```tsx copy
const fieldTransforms = {
  text: ({ value }) => <p>{value}</p>,
  // ...
};
```

You can specify a custom render method for each known [field type](/docs/api-reference/fields), or introduce completely new ones.

## Render Props

| Prop                          | Example              | Type                                |
| ----------------------------- | -------------------- | ----------------------------------- |
| [`componentId`](#componentid) | `"Heading-12345"`    | string                              |
| [`field`](#field)             | `{ type: "text" }`   | [Field](/docs/api-reference/fields) |
| [`isReadOnly`](#isreadonly)   | `false`              | boolean                             |
| [`propName`](#propname)       | `"title"`            | string                              |
| [`propPath`](#proppath)       | `"obj.arr[2].title"` | string                              |
| [`value`](#value)             | `"Value"`            | any                                 |

### `componentId`

The id of the component containing this prop

### `field`

The component's field definition for this prop.

### `isReadOnly`

Whether or not this field is currently set to read-only.

### `propName`

The name of this prop provided to the [component field](/docs/api-reference/configuration/component-config#fields) config.

### `propPath`

The path of this prop within the props object.

Use in conjunction with the [`setDeep`](/docs/api-reference/functions/set-deep) utility to set data for a key deep within an object or array, normally [ComponentData](/docs/api-reference/data-model/component-data).

### `value`

The value of the prop.

{/_ ===== ./docs/pages/docs/api-reference/fields.mdx ===== _/}

# Fields

A field represents a user input shown in the Puck interface.

- [Base](fields/base) - The base type shared by all fields.
- [Array](fields/array) - Render a list of items with a subset of fields.
- [Custom](fields/custom) - Implement a field with a custom UI.
- [External](fields/external) - Select data from a list, typically populated via a third-party API.
- [Number](fields/number) - Render a `number` input.
- [Object](fields/object) - Render a subset of fields.
- [Radio](fields/radio) - Render a `radio` input with a list of options.
- [Select](fields/select) - Render a `select` input with a list of options.
- [Slot](fields/slot) - Define an area containing nested components.
- [Text](fields/text) - Render a `text` input.
- [Textarea](fields/textarea) - Render a `textarea` input.

{/_ ===== ./docs/pages/docs/api-reference/fields/array.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";

# Array

Render a list of items with a subset of fields. Extends [Base](base).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      items: {
        type: "array",
        arrayFields: {
          title: { type: "text" },
        },
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>

```tsx {5-10} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
        },
      },
      render: ({ items }) => {
        return (
          <ul>
            {items.map((item, i) => (
              <li key={i}>{item.title}</li>
            ))}
          </ul>
        );
      },
    },
  },
};
```

## Params

| Param                                           | Example                                       | Type     | Status   |
| ----------------------------------------------- | --------------------------------------------- | -------- | -------- |
| [`type`](#type)                                 | `type: "array"`                               | "array"  | Required |
| [`arrayFields`](#arrayfields)                   | `arrayFields: { title: { type: "text" } }`    | Object   | Required |
| [`defaultItemProps`](#defaultitemprops)         | `defaultItemProps: { title: "Hello, world" }` | String   | -        |
| [`getItemSummary()`](#getitemsummaryitem-index) | `getItemSummary: (item) => item.title`        | Function | -        |
| [`max`](#max)                                   | `max: 3`                                      | Number   | -        |
| [`min`](#min)                                   | `min: 1`                                      | Number   | -        |

## Required params

### `type`

The type of the field. Must be `"array"` for Array fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
        },
      },
      // ...
    },
  },
};
```

### `arrayFields`

Describe the fields for each item in the array. Shares an API with `fields`.

Can include any field type, including nested array fields.

```tsx {7-9} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
        },
      },
      // ...
    },
  },
};
```

## Optional params

### `defaultItemProps`

Set the default values when a new item is added to the array.

```tsx {10-12} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
          defaultItemProps: {
            title: "Hello, world",
          },
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      items: {
        type: "array",
        arrayFields: {
          title: { type: "text" },
        },
        defaultItemProps: {
          title: "Hello, world",
        },
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>

### `getItemSummary(item, index)`

Get a label of each item in the array.

```tsx {10} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
          getItemSummary: (item) => item.title || "Item",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      items: {
        type: "array",
        arrayFields: {
          title: { type: "text" },
        },
        getItemSummary: (item) => item.title || "Item",
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>

### `max`

The maximum amount of items allowed in the array.

```tsx {10-10} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
          max: 3,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      items: {
        type: "array",
        max: 3,
        arrayFields: {
          title: { type: "text" },
        },
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>

### `min`

The minimum amount of items allowed in the array.

```tsx {10-10} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
          min: 1,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      items: {
        type: "array",
        min: 1,
        arrayFields: {
          title: { type: "text" },
        },
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>

{/_ ===== ./docs/pages/docs/api-reference/fields/base.mdx ===== _/}

# Base

The base type shared by all fields.

## Params

| Param                     | Example               | Type      | Status |
| ------------------------- | --------------------- | --------- | ------ |
| [`label`](#label)         | `label: "Title"`      | String    | -      |
| [`labelIcon`](#labelicon) | `labelIcon: <Icon />` | ReactNode | -      |
| [`metadata`](#metadata)   | `metadata: {}`        | Object    | -      |
| [`visible`](#visible)     | `visible: false`      | Boolean   | -      |

## Optional params

### `label`

Set the label for the input. Puck will use the key if not provided.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          label: "My Field",
          // ...
        },
      },
      // ...
    },
  },
};
```

### `labelIcon`

Set an icon to display next to the label.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          labelIcon: <Icon />,
          // ...
        },
      },
      // ...
    },
  },
};
```

### `metadata`

An object containing additional information for the field.

```tsx {6-8} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          metadata: {
            title: "Hello, world",
          },
          // ...
        },
      },
      // ...
    },
  },
};
```

### `visible`

Show or hide the field. Defaults to `true`.

```tsx {6-8} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          visible: false,
          // ...
        },
      },
      // ...
    },
  },
};
```

{/_ ===== ./docs/pages/docs/api-reference/fields/custom.mdx ===== _/}

import { Puck } from "@/puck";
import { ConfigPreview, PuckPreview } from "@/docs/components/Preview";
import { Callout } from "nextra/components";

# Custom

Implement a field with a custom UI. Extends [Base](base).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: ({ name, onChange, value }) => {
          return (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
              style={{
                background: "white",
                border: "1px solid black",
                padding: 4,
              }}
/>
);
},
},
},
defaultProps: {
title: "Hello, world",
},
render: ({ title }) => {
return <p style={{ margin: 0 }}>{title}</p>;
},
}}
/>

```tsx {7-16} copy showLineNumbers
import { FieldLabel } from "@measured/puck";

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
            />
          ),
        },
      },
      render: ({ title }) => {
        return <p>{title}</p>;
      },
    },
  },
};
```

## Params

| Param                                 | Example                   | Type     | Status   |
| ------------------------------------- | ------------------------- | -------- | -------- |
| [`type`](#type)                       | `type: "custom"`          | "custom" | Required |
| [`render()`](#renderparams)           | `render: () => <input />` | Function | Required |
| [`contentEditable`](#contentEditable) | `contentEditable: true`   | Boolean  | -        |

## Required params

### `type`

The type of the field. Must be `"custom"` for Custom fields.

```tsx {6} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
            />
          ),
        },
      },
      // ...
    },
  },
};
```

### `render(params)`

Render the custom field.

```tsx {9-14} showLineNumbers copy
import { FieldLabel } from "@measured/puck";

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
            />
          ),
        },
      },
      // ...
    },
  },
};
```

#### `params`

| Param                 | Example                    | Type     |
| --------------------- | -------------------------- | -------- |
| `field`               | `{ type: "custom" }`       | Object   |
| `id`                  | `id`                       | String   |
| `name`                | `"title"`                  | String   |
| `onChange(value, ui)` | `onChange("Hello, world")` | Function |
| `value`               | `"Hello, world"`           | Any      |

##### onChange(value, [ui])

Set the value of the field and optionally update the [Puck UI state](/docs/api-reference/data-model/app-state#ui).

| Param   | Example                       | Type                                                   | Status   |
| ------- | ----------------------------- | ------------------------------------------------------ | -------- |
| `value` | `"Hello, world"`              | Any                                                    | Required |
| `ui`    | `{leftSideBarVisible: false}` | [UiState](/docs/api-reference/data-model/app-state#ui) |          |

## Optional params

### contentEditable

Enable inline text editing for this field. Only works if the value is a string. Defaults to `false`.

<Callout type="warning">
  When setting `contentEditable`, your [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) prop will be converted to an [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) when rendered inside [`<Puck>`](/docs/api-reference/components/puck) (but not [`<Render>`](/docs/api-reference/components/render)). When using TypeScript, change your `string` to  `string | ReactNode`.
</Callout>

```tsx {7, 10} copy
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          contentEditable: true,
          render: ({ name, onChange, value }) => (
            <input
              value={value} // Bind to value for 2-way binding
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
            />
          ),
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "custom",
        contentEditable: true,
        render: ({ name, onChange, value }) => (
          <input
            value={value}
            name={name}
            onChange={(e) => onChange(e.currentTarget.value)}
            style={{
              background: "white",
              border: "1px solid black",
              padding: 4,
            }}
/>
),
},
},
defaultProps: {
title: "Edit me inline",
},
render: ({ title }) => {
return <div>{title}</div>;
},
}}

> <Puck.Preview />
> </ConfigPreview>

## Further reading

- [Custom Fields guide](/docs/extending-puck/custom-fields)
- [The `<FieldLabel>` API reference](/docs/api-reference/components/field-label)

{/_ ===== ./docs/pages/docs/api-reference/fields/external.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";

# External

Select data from a list, typically populated via a third-party API. Extends [Base](base).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
      },
    },
    render: ({ data }) => {
      return <p style={{ margin: 0 }}>{data?.title || "No data selected"}</p>;
},
}}
/>

```tsx {5-15} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            // ... fetch data from a third party API, or other async source

            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
        },
      },
      render: ({ data }) => {
        return <p>{data?.title || "No data selected"}</p>;
      },
    },
  },
};
```

## Params

| Param                                     | Example                                      | Type       | Status   |
| ----------------------------------------- | -------------------------------------------- | ---------- | -------- |
| [`type`](#type)                           | `type: "external"`                           | "external" | Required |
| [`fetchList()`](#fetchlistqueryparams)    | `fetchList: async () => []`                  | Function   | Required |
| [`filterFields`](#filterfields)           | `{ "rating": { type: "number" } }`           | Object     | -        |
| [`getItemSummary()`](#getitemsummaryitem) | `getItemSummary: async ({ title }) => title` | Function   | -        |
| [`initialFilters`](#initialfilters)       | `{ "rating": 1 }`                            | Object     | -        |
| [`initialQuery`](#initialquery)           | `initialQuery: "Hello, world"`               | String     | -        |
| [`mapProp()`](#mappropitem)               | `mapProp: async ({ title }) => title`        | Function   | -        |
| [`mapRow()`](#maprowitem)                 | `mapRow: async ({ title }) => title`         | Function   | -        |
| [`placeholder`](#placeholder)             | `placeholder: "Select content"`              | String     | -        |
| [`renderFooter()`](#renderfooterprops)    | `renderFooter: (props) => <p>Hello</p>`      | Function   | -        |
| [`showSearch`](#showsearch)               | `showSearch: true`                           | Boolean    | -        |

## Required params

### `type`

The type of the field. Must be `"external"` for Array fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
        },
      },
      // ...
    },
  },
};
```

### `fetchList(queryParams)`

Return a promise with a list of objects to be rendered in a tabular format via the external input modal.

The table will only render strings and numbers.

```tsx {7-14} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            // ... fetch data from a third party API, or other async source

            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
        },
      },
      // ...
    },
  },
};
```

#### `queryParams`

The parameters passed to the `fetchList` method based on your field configuration.

| Param                 | Example             | Type   |
| --------------------- | ------------------- | ------ |
| [`query`](#query)     | `"My Query"`        | String |
| [`filters`](#filters) | `"{ "rating": 1 }"` | Object |

##### `query`

The search query when using [`showSearch`](#showsearch).

##### `filters`

An object describing the filters configured by [`filterFields`](#filterfields).

## Optional params

### `filterFields`

An object describing filters for your query using the [Fields API](/docs/api-reference/fields)

```tsx {13-17} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async ({ filters }) => {
            return [
              { title: "Apple", description: "Lorem ipsum 1", rating: 5 },
              { title: "Orange", description: "Lorem ipsum 2", rating: 3 },
            ].filter((item) => item.rating >= (filters.rating || 0));
          },
          filterFields: {
            rating: {
              type: "number",
            },
          },
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
fields: {
data: {
type: "external",
fetchList: async ({ filters }) => {
return [
{ title: "Apple", description: "Lorem ipsum 1", rating: 5 },
{ title: "Orange", description: "Lorem ipsum 2", rating: 3 },
].filter((item) =>
item.rating >= (filters.rating || 0)
)
},
filterFields: {
rating: {
type: "number",
},
},
},
},
render: ({ data }) => {
return <p>{data?.title || "No data selected"}</p>;
},

}}
/>

### `getItemSummary(item)`

Get the label to show once the item is selected.

```tsx {13} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
          getItemSummary: (item) => item.title,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
        getItemSummary: (item) => item.title,
      },
    },
    defaultProps: {
      data: {
        title: "Hello, world",
        description: "Lorem ipsum 1",
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },
  }}
/>

### `initialFilters`

The initial filter values when using [`filterFields`](#filterfields).

```tsx {18-20} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async ({ filters }) => {
            return [
              { title: "Apple", description: "Lorem ipsum 1", rating: 5 },
              { title: "Orange", description: "Lorem ipsum 2", rating: 3 },
            ].filter((item) => item.rating >= (filters.rating || 0));
          },
          filterFields: {
            rating: {
              type: "number",
            },
          },
          initialFilters: {
            rating: 1,
          },
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
fields: {
data: {
type: "external",
fetchList: async ({ filters }) => {
return [
{ title: "Apple", description: "Lorem ipsum 1", rating: 5 },
{ title: "Orange", description: "Lorem ipsum 2", rating: 3 },
].filter((item) =>
item.rating >= (filters.rating || 0)
)
},
filterFields: {
rating: {
type: "number",
},
},
initialFilters: {
rating: 1,
},
},
},
render: ({ data }) => {
return <p>{data?.title || "No data selected"}</p>;
},

}}
/>

### `initialQuery`

Set an initial query when using showing a search input with [`showSearch`](#showsearch).

```tsx {16} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async ({ query }) => {
            return [
              { title: "Apple", description: "Lorem ipsum 1" },
              { title: "Orange", description: "Lorem ipsum 2" },
            ].filter((item) => {
              // ...
            });
          },
          showSearch: true,
          initialQuery: "Apple",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
fields: {
data: {
type: "external",
fetchList: async ({ query }) => {
return [
{
title: "Apple",
description:
"An apple is a round, edible fruit produced by an apple tree.",
},
{
title: "Orange",
description:
"An orange is a fruit of various citrus species in the family Rutaceae.",
},
].filter((item) => {
if (!query) return item;

            const queryLowercase = query.toLowerCase();

            if (item.title.toLowerCase().indexOf(queryLowercase) > -1) {
              return item;
            }

            if (item.description.toLowerCase().indexOf(queryLowercase) > -1) {
              return item;
            }
          })
        },
        showSearch: true,
        initialQuery: 'apple'
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },

}}
/>

### `mapProp(item)`

Modify the shape of the item selected by the user in the table before writing to the page data.

```tsx {13} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
          mapProp: (item) => item.description,
        },
      },
      render: ({ data }) => {
        return <p>{data || "No data selected"}</p>;
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
        mapProp: (item) => item.description,
      },
    },
    render: ({ data }) => {
      return <p>{data || "No data selected"}</p>;
    },
  }}
/>

### `mapRow(item)`

Modify the shape of the item before rendering it in the table. This will not affect the selected data.

```tsx {13} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
          mapRow: (item) => ({ ...item, title: item.title.toUpperCase() }),
        },
      },
      render: ({ data }) => {
        return <p>{data || "No data selected"}</p>;
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
        mapRow: (item) => ({ ...item, title: item.title.toUpperCase() }),
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },
  }}
/>

### `placeholder`

Set the placeholder text when no item is selected.

```tsx {13} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Apple", description: "Lorem ipsum 1" },
              { title: "Orange", description: "Lorem ipsum 2" },
            ];
          },
          placeholder: "Pick your favorite fruit",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            {
              title: "Apple",
              description:
                "An apple is a round, edible fruit produced by an apple tree.",
            },
            {
              title: "Orange",
              description:
                "An orange is a fruit of various citrus species in the family Rutaceae.",
            },
          ];
        },
        placeholder: "Pick your favorite fruit",
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },
  }}
/>

### `renderFooter(props)`

Customize what will be displayed in the footer of the modal.

```tsx {13-15} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
          renderFooter: ({ items }) => (
            <b>Custom footer with {items.length} results</b>
          ),
        },
      },
      render: ({ data }) => {
        return <p>{data || "No data selected"}</p>;
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
        renderFooter: ({ items }) => (
          <b>Custom footer with {items.length} results</b>
        ),
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },
  }}
/>

### `showSearch`

Show a search input, the value of which will be passed to `fetchList` as the `query` param.

```tsx {15} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async ({ query }) => {
            return [
              { title: "Apple", description: "Lorem ipsum 1" },
              { title: "Orange", description: "Lorem ipsum 2" },
            ].filter((item) => {
              // ...
            });
          },
          showSearch: true,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
fields: {
data: {
type: "external",
fetchList: async ({ query }) => {
return [
{
title: "Apple",
description:
"An apple is a round, edible fruit produced by an apple tree.",
},
{
title: "Orange",
description:
"An orange is a fruit of various citrus species in the family Rutaceae.",
},
].filter((item) => {
if (!query) return item;

            const queryLowercase = query.toLowerCase();

            if (item.title.toLowerCase().indexOf(queryLowercase) > -1) {
              return item;
            }

            if (item.description.toLowerCase().indexOf(queryLowercase) > -1) {
              return item;
            }
          })
        },
        showSearch: true,
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },

}}
/>

<div id="puck-portal-root" />

{/_ ===== ./docs/pages/docs/api-reference/fields/number.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";

# Number

Render a `number` input. Extends [Base](base).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      myNumber: {
        type: "number",
      },
    },
    defaultProps: { myNumber: 5 },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>

```tsx {5-7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
        },
      },
      render: ({ myNumber }) => {
        return <div>{myNumber}</div>;
      },
    },
  },
};
```

## Params

| Param                         | Example                         | Type     | Status   |
| ----------------------------- | ------------------------------- | -------- | -------- |
| [`type`](#type)               | `type: "number"`                | "number" | Required |
| [`max`](#max)                 | `max: 10`                       | number   | -        |
| [`min`](#min)                 | `min: 0`                        | number   | -        |
| [`placeholder`](#placeholder) | `placeholder: "Lorem ipsum..."` | String   | -        |

## Required params

### `type`

The type of the field. Must be `"number"` for Number fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
        },
      },
      // ...
    },
  },
};
```

## Optional params

### `max`

The maximum numeric value allowed.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
          max: 10,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      myNumber: {
        type: "number",
        max: 10,
      },
    },
    defaultProps: { myNumber: 5 },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>

### `min`

The minimum numeric value allowed.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
          min: 0,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      myNumber: {
        type: "number",
        min: 0,
      },
    },
    defaultProps: { myNumber: 5 },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>

### Placeholder

The placeholder text to display when the field is empty.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
          placeholder: "Lorem ipsum...",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      myNumber: {
        type: "number",
        placeholder: "Lorem ipsum...",
      },
    },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>

### `step`

The stepping interval when interacting with the field.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
          step: 0.1,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      myNumber: {
        type: "number",
        step: 0.1,
      },
    },
    defaultProps: { myNumber: 5 },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>

{/_ ===== ./docs/pages/docs/api-reference/fields/object.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";

# Object

Render an object with a subset of fields. Extends [Base](base).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      params: {
        type: "object",
        objectFields: {
          title: { type: "text" },
        },
      },
    },
    defaultProps: { params: { title: "Hello, world" } },
    render: ({ params }) => {
      return <p>{params.title}</p>;
    },
  }}
/>

```tsx {5-10} copy
const config = {
  components: {
    Example: {
      fields: {
        params: {
          type: "object",
          objectFields: {
            title: { type: "text" },
          },
        },
      },
      render: ({ params }) => {
        return <p>{params.title}</p>;
      },
    },
  },
};
```

## Params

| Param                           | Example                                     | Type    | Status   |
| ------------------------------- | ------------------------------------------- | ------- | -------- |
| [`type`](#type)                 | `type: "array"`                             | "array" | Required |
| [`objectFields`](#objectfields) | `objectFields: { title: { type: "text" } }` | Object  | Required |

## Required params

### `type`

The type of the field. Must be `"object"` for Object fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "object",
          objectFields: {
            title: { type: "text" },
          },
        },
      },
      // ...
    },
  },
};
```

### `objectFields`

Describe the fields for the object. Shares an API with `fields`.

Can include any field type, including nested object fields.

```tsx {7-9} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "object",
          objectFields: {
            title: { type: "text" },
          },
        },
      },
      // ...
    },
  },
};
```

{/_ ===== ./docs/pages/docs/api-reference/fields/radio.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";

# Radio

Render a `radio` input with a list of options. Extends [Base](base).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      textAlign: {
        type: "radio",
        options: [
          { label: "Left", value: "left" },
          { label: "Right", value: "right" },
        ],
      },
    },
    defaultProps: {
      textAlign: "left",
    },
    render: ({ textAlign }) => {
      return <p style={{ textAlign, margin: 0 }}>Hello, world</p>;
},
}}
/>

```tsx {5-11} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "radio",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      defaultProps: {
        textAlign: "left",
      },
      render: ({ textAlign }) => {
        return <p style={{ textAlign }}>Hello, world</p>;
      },
    },
  },
};
```

## Params

| Param                 | Example                                               | Type     | Status   |
| --------------------- | ----------------------------------------------------- | -------- | -------- |
| [`type`](#type)       | `type: "radio"`                                       | "radio"  | Required |
| [`options`](#options) | `options: [{ label: "Option 1", value: "option-1" }]` | Object[] | Required |

## Required params

### `type`

The type of the field. Must be `"radio"` for Array fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "radio",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      // ...
    },
  },
};
```

### `options`

The options for the radio field. The `value` can be a String, Number or Boolean.

```tsx {7-10} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "radio",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      // ...
    },
  },
};
```

{/_ ===== ./docs/pages/docs/api-reference/fields/select.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";

# Select

Render a `select` input with a list of options. Extends [Base](base).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      textAlign: {
        type: "select",
        options: [
          { label: "Left", value: "left" },
          { label: "Right", value: "right" },
        ],
      },
    },
    render: ({ textAlign }) => {
      return <p style={{ textAlign, margin: 0 }}>Hello, world</p>;
},
}}
/>

```tsx {5-11} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "select",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      render: ({ textAlign }) => {
        return <p style={{ textAlign }}>Hello, world</p>;
      },
    },
  },
};
```

## Params

| Param                 | Example                                               | Type     | Status   |
| --------------------- | ----------------------------------------------------- | -------- | -------- |
| [`type`](#type)       | `type: "select"`                                      | "select" | Required |
| [`options`](#options) | `options: [{ label: "Option 1", value: "option-1" }]` | Object[] | Required |

## Required params

### `type`

The type of the field. Must be `"select"` for Array fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "select",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      // ...
    },
  },
};
```

### `options`

The options for the select field. The `value` can be a String, Number or Boolean.

```tsx {7-10} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "select",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      // ...
    },
  },
};
```

{/_ ===== ./docs/pages/docs/api-reference/fields/slot.mdx ===== _/}

import {
ConfigPreview,
PuckPreview,
CodeBlockDrawer,
} from "@/docs/components/Preview";
import { usePuck } from "@/puck";

# Slot

Define a drag-and-drop area containing nested components. Extends [Base](base).

- This field produces an array of [ComponentData](/docs/api-reference/data-model/component-data)
- The array is transformed to a [render function](#render-function) before being provided to `render()`

This field does render any UI in the form section.

<PuckPreview
label="Example"
renderDrawer={() => {
return (
<CodeBlockDrawer getCode={(appState) => appState.data.content[0].props} />
);
}}
config={{
    components: {
      Example: {
        fields: {
          content: {
            type: "slot",
          },
        },
        render: ({ content: Content }) => {
          return (
            <div style={{ padding: 32 }}>
<Content />

</div>
);
},
permissions: {
duplicate: false,
delete: false,
},
},
Card: {
render: () => {
return (
<div
style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }} >
Hello, world
</div>
);
},
},
},
}}
data={{
    content: [
      {
        type: "Example",
        props: {
          id: "Example-1",
          content: [{ type: "Card", props: { id: "Example-2" } }],
        },
      },
    ],
    root: { props: {} },
  }}
/>

```tsx {5-7,10} copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => {
        return <Content />;
      },
    },
    Card: {
      render: () => <div>Hello, world</div>,
    },
  },
};
```

## TypeScript

When using TypeScript, make sure to use the `Slot` type so the render prop is correctly transformed.

```tsx
import { Slot } from "@measured/puck";

type Props = {
  Example: {
    content: Slot; // Converted from the ComponentData[] type into a render function
  };
};
```

## Params

| Param                   | Example                      | Type   | Status   |
| ----------------------- | ---------------------------- | ------ | -------- |
| [`type`](#type)         | `type: "slot"`               | "slot" | Required |
| [`allow`](#allow)       | `allow: ["HeadingBlock"]`    | Array  | -        |
| [`disallow`](#disallow) | `disallow: ["HeadingBlock"]` | Array  | -        |

## Required params

### `type`

The type of the field. Must be `"slot"` for Slot fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      // ...
    },
  },
};
```

## Optional params

### `allow`

Only allow specific components to be dragged into the slot. Will be overwritten by the [`allow` prop](#allow-1) provided to the render function.

```tsx copy {7}
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
          allow: ["HeadingBlock"],
        },
      },
      // ...
    },
  },
};
```

### `disallow`

Allow all but specific components to be dragged into the slot. Any items in `allow` will override `disallow`. Will be overwritten by the [`disallow` prop](#disallow-1) provided to the render function.

```tsx copy {7}
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
          disallow: ["HeadingBlock"],
        },
      },
      // ...
    },
  },
};
```

## Render function

Slot data is provided to `render()` as a render function (or component). Provide props to this function to customize the behavior of the slot at render-time.

| Param                               | Example                      | Type          | Status |
| ----------------------------------- | ---------------------------- | ------------- | ------ |
| [`allow`](#allow-1)                 | `allow: ["HeadingBlock"]`    | Array         | -      |
| [`className`](#classname)           | `className: "MyClass"`       | String        | -      |
| [`collisionAxis`](#collisionaxis)   | `collisionAxis: "x"`         | String        | -      |
| [`disallow`](#disallow-1)           | `disallow: ["HeadingBlock"]` | Array         | -      |
| [`minEmptyHeight`](#minemptyheight) | `minEmptyHeight: 256`        | Number        | -      |
| [`ref`](#ref)                       | `ref: ref`                   | Ref           | -      |
| [`style`](#style)                   | `style: {display: "flex"}`   | CSSProperties | -      |

### `allow`

Only allow specific components to be dragged into the slot. Overrides the [`allow` parameter](#allow) provided to the field.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        return <Content allow={["HeadingBlock"]} />;
      },
    },
  },
};
```

### `className`

Provide a className to the rendered element. The default styles will still be applied.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        return <Content className="MyComponent" />;
      },
    },
  },
};
```

### `collisionAxis`

Configure which axis Puck will use for overlap collision detection.

Options:

- `x` - detect collisions based their x-axis overlap
- `y` - detect collisions based their y-axis overlap
- `dynamic` - automatically choose an axis based on the direction of travel

The defaults are set based on the CSS layout of the parent:

- grid: `dynamic`
- flex (row): `x`
- inline/inline-block: `x`
- Everything else: `y`

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        return <Content collisionAxis="dynamic" />;
      },
    },
  },
};
```

### `disallow`

Allow all but specific components to be dragged into the slot. Any items in `allow` will override `disallow`.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content }) => {
        return <Content disallow={["HeadingBlock"]} />;
      },
    },
  },
};
```

### `minEmptyHeight`

The minimum height of the slot when empty, in pixels. Defaults to `128`.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: () => {
        return <Content minEmptyHeight={256} />;
      },
    },
  },
};
```

### `ref`

A [React ref](https://react.dev/learn/manipulating-the-dom-with-refs), assigned to the root node of the slot.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        const ref = useRef();

        return <Content ref={ref} />;
      },
    },
  },
};
```

### `style`

Provide a style attribute to the slot. The default styles will still be applied.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        return <Content style={{ display: "flex" }} />;
      },
    },
  },
};
```

{/_ ===== ./docs/pages/docs/api-reference/fields/text.mdx ===== _/}

import { Puck } from "@/puck";
import { ConfigPreview, PuckPreview } from "@/docs/components/Preview";
import { Callout } from "nextra/components";

# Text

Render a `text` input. Extends [Base](base).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: { title: "Hello, world" },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
},
}}
/>

```tsx {5-7} copy
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "text",
        },
      },
      render: ({ title }) => {
        return <p>{title}</p>;
      },
    },
  },
};
```

## Params

| Param                                 | Example                         | Type    | Status   |
| ------------------------------------- | ------------------------------- | ------- | -------- |
| [`type`](#type)                       | `type: "text"`                  | "text"  | Required |
| [`contentEditable`](#contentEditable) | `contentEditable: true`         | Boolean | -        |
| [`placeholder`](#placeholder)         | `placeholder: "Lorem ipsum..."` | String  | -        |

## Required params

### `type`

The type of the field. Must be `"text"` for Text fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "text",
        },
      },
      // ...
    },
  },
};
```

## Optional params

### contentEditable

Enable inline text editing for this field. Defaults to `false`.

<Callout type="warning">
  When setting `contentEditable`, your [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) prop will be converted to an [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) when rendered inside [`<Puck>`](/docs/api-reference/components/puck) (but not [`<Render>`](/docs/api-reference/components/render)). When using TypeScript, change your `string` to  `string | ReactNode`.
</Callout>

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "text",
          contentEditable: true,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "text",
        contentEditable: true,
      },
    },
    defaultProps: {
      title: "Edit me inline",
    },
    render: ({ title }) => {
      return <div>{title}</div>;
    },
  }}

> <Puck.Preview />
> </ConfigPreview>

### Placeholder

The placeholder text to display when the field is empty.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "text",
          placeholder: "Lorem ipsum...",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "text",
        placeholder: "Lorem ipsum...",
      },
    },
    render: ({ title }) => {
      return <div>{title}</div>;
    },
  }}
/>

{/_ ===== ./docs/pages/docs/api-reference/fields/textarea.mdx ===== _/}

import { Puck } from "@/puck";
import { ConfigPreview, PuckPreview } from "@/docs/components/Preview";
import { Callout } from "nextra/components";

# Textarea

Render a `textarea` input. Extends [Base](base).

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      description: {
        type: "textarea",
      },
    },
    render: ({ description }) => {
      return <p>{description}</p>;
    },
    defaultProps: { description: "Hello, world" },
  }}
/>

```tsx {5-7} copy
const config = {
  components: {
    Example: {
      fields: {
        description: {
          type: "textarea",
        },
      },
      render: ({ description }) => {
        return <p>{description}</p>;
      },
    },
  },
};
```

## Params

| Param                                 | Example                         | Type       | Status   |
| ------------------------------------- | ------------------------------- | ---------- | -------- |
| [`type`](#type)                       | `type: "textarea"`              | "textarea" | Required |
| [`contentEditable`](#contentEditable) | `contentEditable: true`         | Boolean    | -        |
| [`placeholder`](#placeholder)         | `placeholder: "Lorem ipsum..."` | String     | -        |

## Required params

### `type`

The type of the field. Must be `"textarea"` for Textarea fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        description: {
          type: "textarea",
        },
      },
      // ...
    },
  },
};
```

## Optional params

### contentEditable

Enable inline text editing for this field. Defaults to `false`.

<Callout type="warning">
  When setting `contentEditable`, your [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) prop will be converted to an [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) when rendered inside [`<Puck>`](/docs/api-reference/components/puck) (but not [`<Render>`](/docs/api-reference/components/render)). When using TypeScript, change your `string` to  `string | ReactNode`.
</Callout>

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        description: {
          type: "textarea",
          contentEditable: true,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      description: {
        type: "textarea",
        contentEditable: true,
      },
    },
    defaultProps: {
      description:
        "You can edit this in the preview section, too.\nIt also supports line breaks.",
    },
    render: ({ description }) => {
      return <div>{description}</div>;
    },
  }}

> <Puck.Preview />
> </ConfigPreview>

### Placeholder

The placeholder text to display when the field is empty.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        description: {
          type: "textarea",
          placeholder: "Lorem ipsum...",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      description: {
        type: "textarea",
        placeholder: "Lorem ipsum...",
      },
    },
    render: ({ description }) => {
      return <div>{description}</div>;
    },
  }}
/>

{/_ ===== ./docs/pages/docs/api-reference/functions.mdx ===== _/}

# Functions

- [migrate](functions/migrate) - Migrate a legacy [data payload](/docs/api-reference/data-model/data) to the latest shape.
- [resolveAllData](functions/resolve-all-data) - Utility function to execute all [`resolveData` methods](/docs/api-reference/configuration/component-config#resolvedatadata-params) on a data payload.
- [transformProps](functions/transform-props) - Transform component props stored in the [data payload](/docs/api-reference/data-model/data). Use this for migrations, like prop renames.
- [useGetPuck](functions/use-get-puck) - A hook for accessing the latest [PuckApi](/docs/api-reference/puck-api) outside of the React render lifecycle.
- [usePuck](functions/use-puck) - A hook for accessing the [PuckApi](/docs/api-reference/puck-api) inside your components.
- [walkTree](functions/walk-tree) - Walk the tree recursively, modifying it if necessary.

{/_ ===== ./docs/pages/docs/api-reference/functions/migrate.mdx ===== _/}

---

## title: migrate

# migrate

Migrate the [Data payload](/docs/api-reference/data-model/data) to the latest shape, automatically transforming deprecated data.

```tsx copy showLineNumbers {7-10}
import { migrate } from "@measured/puck";

migrate(legacyData);
```

## Migrations

### Root data to props

Migrates any props stored on root data to the `props` object.

**Before**

```json
{
  "root": {
    "title": "Hello, world"
  }
}
```

**After**

```json
{
  "root": {
    "props": { "title": "Hello, world" }
  }
}
```

### DropZones to slots

Migrates all [DropZone](/docs/api-reference/components/drop-zone) data from [`zones`](/docs/api-reference/data-model/data#zones) to inline [slots](/docs/api-reference/fields/slot). Requires slots to be provided via the [`config`](#config) arg, where the field name for the slot matches the `zone` prop of the DropZone. See the [DropZone to slots migration guide](/docs/guides/migrations/dropzones-to-slots) for more information.

**Before**

```json showLineNumbers {10-20}
{
  "content": [
    {
      "type": "Grid",
      "props": {
        "id": "Grid-12345"
      }
    }
  ],
  "zones": {
    "Grid-12345:items": [
      {
        "type": "HeadingBlock",
        "props": {
          "id": "Heading-12345",
          "title": "Hello, world"
        }
      }
    ]
  }
}
```

**After**

```json showLineNumbers {7-15}
{
  "content": [
    {
      "type": "Grid",
      "props": {
        "id": "Grid-12345",
        "items": [
          {
            "type": "HeadingBlock",
            "props": {
              "id": "Heading-12345",
              "title": "Hello, world"
            }
          }
        ]
      }
    }
  ]
}
```

## Args

| Param                                   | Example                                       | Type                                               | Status   |
| --------------------------------------- | --------------------------------------------- | -------------------------------------------------- | -------- |
| [`data`](#data)                         | `{ content: [{type: "Heading", props: {} }]}` | [Data](/docs/api-reference/data-model/data)        | Required |
| [`config`](#config)                     | `{ components: {} }`                          | [Config](/docs/api-reference/configuration/config) | -        |
| [`migrationOptions`](#migrationoptions) | `{ migrateDynamicZonesForComponent: {} }`     | [MigrationOptions](#migrationoptions-type)         | -        |

### `data`

The legacy data you want to transform.

### `config`

A [config](/docs/api-reference/configuration/config) object. Required if migrating data with [slots](/docs/api-reference/fields/slot).

### `migrationOptions`

Options to customize how data is migrated.

#### `migrateDynamicZonesForComponent`

An object mapping component names to custom dropzone migration functions. The function will be called for any component with DropZones that don't have a slot field definition with a matching name in the config.

Each migration function receives:

- `props`: The current component props
- `zones`: A record of zone names to their content

The function should return the updated component props with the migrated zone data.

```tsx
migrate(legacyData, config, {
  migrateDynamicZonesForComponent: {
    Columns: (props, zones) => {
      return {
        ...props,
        columns: Object.values(zones).map((zone) => ({
          column: zone,
        })),
      };
    },
  },
});
```

**Before**

```json showLineNumbers {16-26}
{
  "root": {
    "props": {
      "title": "Legacy Zones Migration"
    }
  },
  "content": [
    {
      "type": "Columns",
      "props": {
        "columns": [{}],
        "id": "Columns-eb9dfe22-4408-44e6-b8e5-fbaedbbdb3be"
      }
    }
  ],
  "zones": {
    "Columns-eb9dfe22-4408-44e6-b8e5-fbaedbbdb3be:column-0": [
      {
        "type": "Text",
        "props": {
          "text": "Drop zone 1",
          "id": "Text-c2b5c0a5-d76b-4120-8bb3-99934e119967"
        }
      }
    ]
  }
}
```

**After**

```json showLineNumbers {11-23}
{
  "root": {
    "props": {
      "title": "Legacy Zones Migration"
    }
  },
  "content": [
    {
      "type": "Columns",
      "props": {
        "columns": [
          {
            "column": [
              {
                "type": "Text",
                "props": {
                  "text": "Drop zone 1",
                  "id": "Text-c2b5c0a5-d76b-4120-8bb3-99934e119967"
                }
              }
            ]
          }
        ],
        "id": "Columns-eb9dfe22-4408-44e6-b8e5-fbaedbbdb3be"
      }
    }
  ]
}
```

## Returns

The updated [Data](/docs/api-reference/data-model/data) object.

{/_ ===== ./docs/pages/docs/api-reference/functions/register-overlay-portal.mdx ===== _/}

---

## title: registerOverlayPortal

# registerOverlayPortal

Register a node as an [Overlay Portal](/docs/integrating-puck/overlay-portals), enabling interaction beneath the Puck overlay.

```tsx copy
import { registerOverlayPortal } from "@measured/puck";

const MyComponent = () => {
  const ref = useRef(null);

  useEffect(() => registerOverlayPortal(ref.current), [ref.current]);

  return <button ref={ref}>Clickable</button>;
};
```

## Args

| Param           | Example | Type                                                                        | Status |
| --------------- | ------- | --------------------------------------------------------------------------- | ------ |
| [`el`](#el)     | `div`   | [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) | -      |
| [`opts`](#opts) | `{}`    | [Config](/docs/api-reference/configuration/config)                          | -      |

### `el`

The element to turn into a portal. Will do nothing if `null` or `undefined`.

### `opts`

| Param                | Example | Type    | Status |
| -------------------- | ------- | ------- | ------ |
| `disableDrag`        | `false` | boolean | -      |
| `disableDragOnFocus` | `false` | boolean | -      |

#### `opts.disableDrag`

Disable triggering a drag of the parent component when interacting with this element. Defaults to `false`.

#### `opts.disableDragOnFocus`

Disable triggering a drag of the parent component when interacting with this element once it is focused. Drag is disabled following a short delay after focusing. Defaults to `true`.

## Returns

A function to clean-up the portal.

{/_ ===== ./docs/pages/docs/api-reference/functions/resolve-all-data.mdx ===== _/}

---

## title: resolveAllData

# resolveAllData

Utility function to execute all [`resolveData` methods](/docs/api-reference/configuration/component-config#resolvedatadata-params) on a data payload outside of the [`<Puck>`](/docs/api-reference/components/puck) editor, returning the updated value.

```tsx copy
import { resolveAllData } from "@measured/puck";

const updatedData = await resolveAllData(data, config);
```

This is useful if you need to run your resolvers before passing your data to [`<Render>`](/docs/api-reference/components/render).

## Args

| Param    | Example              | Type                                               |
| -------- | -------------------- | -------------------------------------------------- |
| `data`   | `{}`                 | [Data](/docs/api-reference/data-model/data)        |
| `config` | `{ components: {} }` | [Config](/docs/api-reference/configuration/config) |

## Returns

The updated [Data](/docs/api-reference/data-model/data) object.

{/_ ===== ./docs/pages/docs/api-reference/functions/set-deep.mdx ===== _/}

---

## title: setDeep

# setDeep

A convenience utility for setting the value of a key deep within an object.

Useful when implementing [field transforms](/docs/api-reference/field-transforms).

```tsx
import { setDeep } from "@measured/puck";

const newData = setDeep(
  {
    object: {
      array: [{ key: "Hello, world" }],
    },
  },
  "object.array[0].key",
  "Goodbye, world"
);

console.log(newData);
// {
//   object: {
//     array: [{ key: "Goodbye, world" }],
//   },
// }
```

## Args

| Param             | Example                 | Type            |
| ----------------- | ----------------------- | --------------- |
| [`input`](#input) | `{}`                    | Object \| Array |
| [`path`](#path)   | `"object.array[0].key"` | String          |
| [`value`](#value) | `"Hello, world"`        | Any             |

### `input`

The input object or array that contains the key to be updated.

### `path`

A dot-notated path that describes a key deep within an object or array.

Uses dot-notation and square brackets:

- `.` deliminates sub-props in an [object field](/docs/api-reference/fields/object) (i.e. `a.b` represents `b` where `a` is `{b: "Value"}`)
- `[*]` which donate an index in an [array field](/docs/api-reference/fields/array) where `*` is an integer (i.e. `a[0].b` represents `b` in the first item in array `a` with the value `[{b: "Value"}]`)

Commonly provided by the [propPath parameter](/docs/api-reference/field-transforms#proppath) for field transforms.

### `value`

The value to set the key to.

{/_ ===== ./docs/pages/docs/api-reference/functions/transform-props.mdx ===== _/}

---

## title: transformProps

# transformProps

Transform component props stored in a [Data payload](/docs/api-reference/data-model/data). This convenience method can be used for [prop renames and other data migrations](/docs/integrating-puck/data-migration).

This method will modify all data in [`content`](/docs/api-reference/data-model/data#content) and [`zones`](/docs/api-reference/data-model/data#zones).

```tsx copy showLineNumbers {7-10}
import { transformProps } from "@measured/puck";

const data = {
  content: [{ type: "HeadingBlock", props: { title: "Hello, world" } }],
};

const updatedData = transformProps(data, {
  // Rename `title` to `heading`
  HeadingBlock: ({ title, ...props }) => ({ heading: title, ...props }),
});

console.log(updatedData);
// { content: [{ type: "HeadingBlock", props: { heading: "Hello, world" } }] };
```

## Args

| Param                       | Example                                | Type                                               | Status   |
| --------------------------- | -------------------------------------- | -------------------------------------------------- | -------- |
| [`data`](#data)             | `{}`                                   | [Data](/docs/api-reference/data-model/data)        | Required |
| [`transforms`](#transforms) | `{ HeadingBlock: (props) => (props) }` | Object                                             | Required |
| [`config`](#config)         | `{ components: {} }`                   | [Config](/docs/api-reference/configuration/config) | -        |

### `data`

The [Data payload](/docs/api-reference/data-model/data) to be transformed.

### `transforms`

An object describing the transform functions for each component defined in your [`config`](/docs/api-reference/configuration/config).

- `root` is a reserved property, and can be used to update the [`root` component](/docs/api-reference/configuration/config#root) props.

### `config`

A [config](/docs/api-reference/configuration/config) object. Required if transforming data within [slots](/docs/api-reference/fields/slot).

## Returns

The updated [Data](/docs/api-reference/data-model/data) object.

## Notes

- It's important to consider that data may include both components with old data and new data, and write your transform accordingly.

{/_ ===== ./docs/pages/docs/api-reference/functions/use-get-puck.mdx ===== _/}

---

## title: useGetPuck

# useGetPuck

A hook that returns a function that retrieves the latest [`PuckApi`](/docs/api-reference/puck-api) at call time. This is useful in callbacks, effects, or any logic that runs outside the component render lifecycle.

```tsx copy
import { useGetPuck } from "@measured/puck";

const Example = () => {
  const getPuck = useGetPuck();

  const handleClick = useCallback(() => {
    // Current PuckApi is always provided
    const { appState } = getPuck();
  }, [getPuck]);

  return <button onClick={handleClick}>Click me</button>;
};
```

If you need to react to changes to `PuckApi`, try the [`usePuck` hook](use-puck).

## Returns

A function to retrieve the latest [`PuckApi`](/docs/api-reference/puck-api) data at call time.

{/_ ===== ./docs/pages/docs/api-reference/functions/use-puck.mdx ===== _/}

---

## title: usePuck

# usePuck

A hook for accessing the [`PuckApi`](/docs/api-reference/puck-api) as part of your React render lifecycle.. The best way to access `usePuck` is via the `createUsePuck()` factory.

```tsx copy
import { createUsePuck } from "@measured/puck";

const usePuck = createUsePuck();

const Example = () => {
  const type = usePuck((s) => s.selectedItem?.type || "Nothing");

  return <h2>{type} selected</h2>;
};
```

You can also access `usePuck` as a direct export, but you won't be able to use [selectors](#selectordata), resulting in unwanted re-renders and degraded performance.

## Args

| Param                             | Example                      | Type     |
| --------------------------------- | ---------------------------- | -------- |
| [`selector(data)`](#selectordata) | `(s: PuckApi) => s.appState` | Function |

### `selector(data)`

A selector function that describes what `usePuck` returns. Receives [`PuckApi`](/docs/api-reference/puck-api) and returns anything. Be as granular as possible to minimize re-renders.

```tsx
// Good: only re-render when the `selectedItem` changes
const selectedItem = usePuck((s) => s.selectedItem);

// Bad: re-render when anything changes
const { selectedItem } = usePuck();
const { selectedItem } = usePuck((s) => s);

// Bad: selector creates a new object reference, causing an infinite comparison loop
const { selectedItem } = usePuck((s) => ({ ...s.selectedItem }));
```

## Returns

Whatever is returned by the [`selector`](#selectordata).

{/_ ===== ./docs/pages/docs/api-reference/functions/walk-tree.mdx ===== _/}

---

## title: walkTree

# walkTree

Recursively walk the entire tree for the [`Data`](/docs/api-reference/data-model/data) or a single [`ComponentData`](/docs/api-reference/data-model/component-data) node, using a depth-first approach where the deepest [slots](/docs/api-reference/fields/slots) are processed first.

Receives a callback function that is called once for each slot. You can optionally return a value to update the slot.

```tsx
import { walkTree } from "@measured/puck";

// Add the example prop to all children in the data
const newData = walkTree(data, config, (content) =>
  content.map((child) => ({
    ...child,
    props: { ...child.props, example: "Hello, world" },
  }))
);

console.log(newData);
// {
//   "root": {},
//   "content": [
//     {
//       "type": "Component",
//       "props": {
//         "id": "1234",
//         "content": [
//           {
//             "type": "Child",
//             "props": { "id": "5678", "example": "Hello, world" }
//           }
//         ],
//         "example": "Hello, world"
//       }
//     }
//   ]
// }
```

## Args

| Param                                        | Example                            | Type                                                                                                          |
| -------------------------------------------- | ---------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| [`data`](#data)                              | `{ root: {}, content: [] }`        | [Data](/docs/api-reference/data-model/data) \| [ComponentData](/docs/api-reference/data-model/component-data) |
| [`config`](#config)                          | `{ components: {} }`               | [Config](/docs/api-reference/configuration/config)                                                            |
| [`callbackFn()`](#callbackfncontent-options) | `(content) => content.slice(0, 1)` | Function                                                                                                      |

### `data`

The [`Data`](/docs/api-reference/data-model/data) or [`ComponentData`](/docs/api-reference/data-model/component-data) to traverse.

### `config`

A Puck [config](/docs/api-reference/configuration/config) object, used to determine which components contain slots.

### `callbackFn(content, options)`

A callback function called for each slot. Receives an array of [`ComponentData`](/docs/api-reference/data-model/component-data). Optionally returns an updated array of [`ComponentData`](/docs/api-reference/data-model/component-data) to update the content for this slot.

#### Args

| Param                 | Example                                         | Type                                                               |
| --------------------- | ----------------------------------------------- | ------------------------------------------------------------------ |
| [`content`](#content) | `[{ type: "Heading", props: {} }]`              | [`ComponentData[]`](/docs/api-reference/data-model/component-data) |
| [`options`](#options) | `{ parentId: "Flex-123", propName: "Content" }` | object                                                             |

##### `content`

An array of [`ComponentData`](/docs/api-reference/data-model/component-data), containing all the nodes for this slot.

##### `options`

An object containing additional options

##### `options.parentId`

The id of the parent component that defines this slot.

##### `options.propName`

The name of the slot field.

#### Returns

Optionally return an updated array of [`ComponentData`](/docs/api-reference/data-model/component-data) objects.

## Returns

A new [`Data`](/docs/api-reference/data-model/data) or [`ComponentData`](/docs/api-reference/data-model/component-data) object populated with any values returned by the callbackFn.

{/_ ===== ./docs/pages/docs/api-reference/overrides.mdx ===== _/}

import { Callout } from "nextra/components";

# Overrides

<Callout>
  The overrides API is highly experimental and is likely to experience breaking
  changes.
</Callout>

An object describing render functions to override the default Puck interface.

```tsx copy
const overrides = {
  header: () => <header>My header</header>,
};
```

## Available overrides

- [`actionBar`](overrides/action-bar): Override the action bar.
- [`componentOverlay`](overrides/component-overlay): Override the overlay shown on hover or selection of a component.
- [`drawer`](overrides/drawer): Override the component drawer.
- [`drawerItem`](overrides/drawer-item): Override an item within the component drawer.
- [`fields`](overrides/fields): Override the fields wrapper.
- [`fieldLabel`](overrides/field-label): Override the [field labels](/docs/api-reference/configuration/field-label).
- [`fieldTypes`](overrides/field-types): Override each [field type](/docs/api-reference/fields).
- [`header`](overrides/header): Override the header.
- [`headerActions`](overrides/header-actions): Override the header actions. Return a fragment so your items appear inline.
- [`iframe`](overrides/iframe): Override the root of the iframe. Useful for injecting styles.
- [`outline`](overrides/outline): Override the outline.
- [`preview`](overrides/preview): Override the drag-and-drop preview.
- [`puck`](overrides/puck): Override the Puck children. This is the equivalent of passing in [`children`](/docs/api-reference/components/puck#children) to the [`<Puck>`](/docs/api-reference/components/puck) component.

{/_ ===== ./docs/pages/docs/api-reference/overrides/action-bar.mdx ===== _/}

---

## title: actionBar

# actionBar

Override the action bar. Use the [`<ActionBar>` component](/docs/api-reference/components/action-bar) to extend the default ActionBar UI.

```tsx copy
import { ActionBar } from "@measured/puck";

const overrides = {
  actionBar: ({ children, label }) => (
    <ActionBar label={label}>
      <ActionBar.Group>{children}</ActionBar.Group>
    </ActionBar>
  ),
};
```

## Props

| Prop                            | Example          | Type      |
| ------------------------------- | ---------------- | --------- |
| [`children`](#children)         | `<div />`        | ReactNode |
| [`label`](#label)               | `"HeadingBlock"` | String    |
| [`parentAction`](#parentAction) | `<div />`        | ReactNode |

### `children`

A fragment containing the default [actions](/docs/api-reference/components/action-bar-action). This should normally be rendered inside an [`<ActionBar.Group>`](/docs/api-reference/components/action-bar-group).

### `label`

The default label for the action bar.

### `parentAction`

A single [`<ActionBar.Action>`](/docs/api-reference/components/action-bar-action) to select the current component's parent.

{/_ ===== ./docs/pages/docs/api-reference/overrides/component-overlay.mdx ===== _/}

---

## title: componentOverlay

# componentOverlay

Override the overlay shown on hover or selection of a component.

```tsx copy
const overrides = {
  overlay: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                              | Example        | Type      |
| --------------------------------- | -------------- | --------- |
| [`children`](#children)           | `<div />`      | ReactNode |
| [`componentId`](#componentid)     | `Heading-1234` | string    |
| [`componentType`](#componenttype) | `Heading`      | string    |
| [`hover`](#hover)                 | `false`        | boolean   |
| [`isSelected`](#isselected)       | `false`        | boolean   |

### `children`

The default node for the overlay.

### `componentId`

The [id]() for the component underneath the overlay.

### `componentType`

The [type]() for the component underneath the overlay.

### `hover`

Whether or not the the component for this overlay is hovered over.

A parent will not be `true` if a child node is `true`.

### `isSelected`

Whether or not the the component for this overlay is selected.

{/_ ===== ./docs/pages/docs/api-reference/overrides/drawer-item.mdx ===== _/}

---

## title: drawerItem

# drawerItem

Override an item within the component drawer.

```tsx copy
const overrides = {
  drawerItem: ({ name }) => <div>{name}</div>,
};
```

## Props

| Prop                    | Example    | Type      |
| ----------------------- | ---------- | --------- |
| [`children`](#children) | `<div />`  | ReactNode |
| [`name`](#name)         | `"Button"` | ReactNode |

### `children`

The default node for the drawer item.

### `name`

The name of the drawer item.

{/_ ===== ./docs/pages/docs/api-reference/overrides/drawer.mdx ===== _/}

---

## title: drawer

# drawer

Override the component drawer.

```tsx copy
const overrides = {
  drawer: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the component list.

{/_ ===== ./docs/pages/docs/api-reference/overrides/field-label.mdx ===== _/}

---

## title: fieldLabel

# fieldLabel

Override the label for all internal fields.

```tsx copy
const overrides = {
  fieldLabel: ({ children, label }) => (
    <label>
      <div>{label}</div>
      {children}
    </label>
  ),
};
```

## Props

See [FieldLabel](/docs/api-reference/components/field-label) component.

{/_ ===== ./docs/pages/docs/api-reference/overrides/field-types.mdx ===== _/}

---

## title: fieldTypes

# fieldTypes

Override each [field type](/docs/api-reference/fields).

```tsx copy
const overrides = {
  fieldTypes: {
    number: ({ onChange }) => (
      <input type="number" onChange={(e) => onChange(e.currentTarget.value)} />
    ),
    text: ({ onChange }) => (
      <input type="text" onChange={(e) => onChange(e.currentTarget.value)} />
    ),
    // ...
  },
};
```

You can specify a custom render method for each known [field type](/docs/api-reference/fields), or introduce completely new ones.

## Render Props

Extends the [`<AutoField>` API](/docs/api-reference/components/auto-field).

| Prop                    | Example     | Type                                                           |
| ----------------------- | ----------- | -------------------------------------------------------------- |
| [`children`](#children) | `<input />` | ReactNode                                                      |
| [`name`](#name)         | `"title"`   | string                                                         |
| `...`                   | `{}`        | [`<AutoField>` API](/docs/api-reference/components/auto-field) |

### `children`

The default node for this field type.

### `name`

The name of the prop this field is rendering for.

{/_ ===== ./docs/pages/docs/api-reference/overrides/fields.mdx ===== _/}

---

## title: fields

# fields

Override the fields wrapper.

```tsx copy
const overrides = {
  fields: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the fields.

{/_ ===== ./docs/pages/docs/api-reference/overrides/header-actions.mdx ===== _/}

---

## title: headerActions

# headerActions

Override the header actions. Return a fragment so your items appear inline.

```tsx copy
const overrides = {
  headerActions: ({ children }) => (
    <>
      {children}
      <button>Click me</button>
    </>
  ),
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the header actions, which includes the default publish button.

{/_ ===== ./docs/pages/docs/api-reference/overrides/header.mdx ===== _/}

---

## title: header

# header

Override the header.

```tsx copy
const overrides = {
  header: ({ actions }) => (
    <header>
      <span>My header</span>
      <div>{actions}</div>
    </header>
  ),
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`actions`](#actions)   | `<div />` | ReactNode |
| [`children`](#children) | `<div />` | ReactNode |

### `actions`

A node containing the [`headerActions`](header-actions).

### `children`

The default node for the header.

{/_ ===== ./docs/pages/docs/api-reference/overrides/iframe.mdx ===== _/}

---

## title: iframe

# iframe

Override the root of the iframe.

```tsx copy
const overrides = {
  iframe: ({ children, document }) => {
    useEffect(() => {
      if (document) {
        document.body.setAttribute("style", "background: hotpink;");
      }
    }, [document]);

    return <>{children}</>;
  },
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`document`](#document) | `{}`      | Document  |
| [`children`](#children) | `<div />` | ReactNode |

### `document`

The document of the iframe window.

### `children`

The default node for the iframe.

{/_ ===== ./docs/pages/docs/api-reference/overrides/outline.mdx ===== _/}

---

## title: outline

# outline

Override the outline.

```tsx copy
const overrides = {
  outline: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the outline.

{/_ ===== ./docs/pages/docs/api-reference/overrides/preview.mdx ===== _/}

---

## title: preview

# preview

Override the drag-and-drop preview.

```tsx copy
const overrides = {
  preview: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the preview.

{/_ ===== ./docs/pages/docs/api-reference/overrides/puck.mdx ===== _/}

---

## title: puck

# puck

Override the Puck children. This is the equivalent of passing in [`children`](/docs/api-reference/components/puck#children) to the [`<Puck>`](/docs/api-reference/components/puck) component.

```tsx copy
const overrides = {
  puck: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the [`<Puck>`](/docs/api-reference/components/puck) children.

{/_ ===== ./docs/pages/docs/api-reference/permissions.mdx ===== _/}

# Permissions

Permissions enable the [toggling of Puck features](/docs/integrating-puck/feature-toggling). There are three types of permissions:

1. **Global permissions** are shared across the entire Puck application. Controlled via the `permissions` prop on the `<Puck>` component.
2. **Component permissions** allow feature control across for all instances of a given component type. Controlled by the `permissions` component config API.
3. **Dynamic permissions** enable control after each data change, and are ideal for per-instance component permissions. Controlled by the `resolvePermissions` component config API.

## APIs

### Setting permissions

1. Global [`permissions` prop](/docs/api-reference/components/puck#permissions)
2. Component [`permissions` parameter](/docs/api-reference/configuration/component-config#permissions)
3. Component [`resolvePermissions` parameter](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params)

### Extending permissions

1. `getPermissions`
2. `refreshPermissions`

## Supported permissions

| Param                     | Example           | Type    | Default     | Status |
| ------------------------- | ----------------- | ------- | ----------- | ------ |
| [`delete`](#delete)       | `delete: true`    | Boolean | `true`      | -      |
| [`drag`](#drag)           | `drag: true`      | Boolean | `true`      | -      |
| [`duplicate`](#duplicate) | `duplicate: true` | Boolean | `true`      | -      |
| [`edit`](#edit)           | `edit: true`      | Boolean | `true`      | -      |
| [`insert`](#insert)       | `insert: true`    | Boolean | `true`      | -      |
| [`...custom`](#custom)    | `myPerm: true`    | Boolean | `undefined` | -      |

### `delete`

Enable deletion of components.

### `drag`

Enable component dragging. Disabling this will lock the component in place, but other components can still be dragged around it.

### `duplicate`

Enable duplication of components.

### `edit`

Enable field editing. This is the same as setting `readOnly` to `true` for all fields.

### `insert`

Enable insertion of new components. Disabling this will disable the component list items.

### `...custom`

Custom permissions enable you to control your own functionality when [extending Puck](/docs/extending-puck/composition).

{/_ ===== ./docs/pages/docs/api-reference/plugin.mdx ===== _/}

import { Callout } from "nextra/components";

# Plugin

<Callout>
  The plugin API is highly experimental and is likely to experience breaking
  changes.
</Callout>

A plugins is an extensions that enhances the capabilities of Puck.

```tsx showLineNumbers copy {3-9, 15}
import { Puck } from "@measured/puck";

const MyPlugin = {
  overrides: {
    drawerItem: ({ name }) => (
      <div style={{ backgroundColor: "hotpink" }}>{name}</div>
    ),
  },
};

export function Editor() {
  return (
    <Puck
      // ...
      plugins={[MyPlugin]}
    />
  );
}
```

## Params

| Prop                                  | Example                                    | Type                                                    | Status |
| ------------------------------------- | ------------------------------------------ | ------------------------------------------------------- | ------ |
| [`fieldTransforms`](#fieldtransforms) | `fieldTransforms: { text: () => <div /> }` | [FieldTransforms](/docs/api-reference/field-transforms) | -      |
| [`overrides`](#overrides)             | `overrides: { fields: () => <div /> }`     | [Overrides](/docs/api-reference/overrides)              | -      |

### `fieldTransforms`

Transform the value of a field before rendering in the editor.Implements the [Field Transforms API](/docs/api-reference/field-transforms).

### `overrides`

Override the render functions for specific portions of the Puck UI. Implements the [`overrides` API](/docs/api-reference/overrides).

{/_ ===== ./docs/pages/docs/api-reference/puck-api.mdx ===== _/}

---

## title: PuckApi

import { Callout } from "nextra/components";

# PuckApi

`PuckApi` exposes Puck's internals to enable extension and modification to Puck's core behavior. It can be accessed by the [`usePuck`](/docs/api-reference/functions/use-puck) and [`useGetPuck`](/docs/api-reference/functions/use-get-puck) hooks.

<Callout type="info">
  `PuckApi` can currently only be accessed through
  [composition](/docs/extending-puck/composition), [UI
  overrides](/docs/extending-puck/ui-overrides) or [custom
  fields](/docs/extending-puck/custom-fields).
</Callout>

## Params

| Param                                             | Example                                            | Type                                                           |
| ------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------------------- |
| [`appState`](#appstate)                           | `{ data: {}, ui: {} }`                             | [AppState](/docs/api-reference/data-model/app-state)           |
| [`dispatch`](#dispatchaction)                     | `(action: PuckAction) => void`                     | Function                                                       |
| [`getItemBySelector`](#getitembyselectorselector) | `() => ({ type: "Heading", props: {} })`           | Function                                                       |
| [`getItemById`](#getitembyidid)                   | `() => ({ type: "Heading", props: {} })`           | Function                                                       |
| [`getSelectorForId`](#getselectorforidid)         | `() => ({ index: 0, zone: 'Flex-123:children'  })` | Function                                                       |
| [`getPermissions`](#getpermissionsparams)         | `() => ({ delete: true  })`                        | Function                                                       |
| [`history`](#history)                             | `{}`                                               | Object                                                         |
| [`refreshPermissions`](#refreshpermissionsparams) | `() => void`                                       | Function                                                       |
| [`selectedItem`](#selecteditem)                   | `{ type: "Heading", props: {id: "my-heading"} }`   | [ComponentData](/docs/api-reference/data-model/data#content-1) |

### `appState`

The current [application state](/docs/api-reference/data-model/app-state) for this Puck instance.

```tsx
console.log(appState.data);
// { content: [], root: {}, zones: {} }
```

### `dispatch(action)`

Execute an [action](/docs/api-reference/actions) to mutate the Puck [application state](/docs/api-reference/data-model/app-state).

```tsx
dispatch({
  type: "setUi",
  ui: {
    leftSideBarVisible: false,
  },
});
```

### `getItemBySelector(selector)`

Get an item's [`ComponentData`](/docs/api-reference/data-model/component-data) by its [selector](/docs/api-reference/data-model/item-selector).

```tsx
getItemBySelector({
  index: 0,
  zone: "Flex-123:children", // The "children" slot field in the component with id "Flex-123"
});
// { type: "HeadingBlock", props: {} }
```

### `getItemById(id)`

Get an item's [`ComponentData`](/docs/api-reference/data-model/component-data) by its component id.

```tsx
getItemById("HeadingBlock-123");
// { type: "HeadingBlock", props: {} }
```

### `getSelectorForId(id)`

Get an item's [selector](/docs/api-reference/data-model/app-state#uiitemselector) by its component id.

```tsx
getSelectorForId("HeadingBlock-123");
// { index: 0, zone: "Flex-123:children" }
```

### `getPermissions(params)`

Get global, component or resolved dynamic [permissions](/docs/api-reference/permissions).

```tsx
getPermissions();
// { delete: true, edit: true }
```

#### Params

| Param  | Example                                           | Type    |
| ------ | ------------------------------------------------- | ------- |
| `item` | `{ type: "HeadingBlock", props: { id: "1234" } }` | Object  |
| `root` | `false`                                           | Boolean |
| `type` | `"HeadingBlock"`                                  | String  |

##### `item`

Specify `item` to retrieve the permissions for a given component instance, resolving any dynamic permissions for that component, as set by the [`resolvePermissions` parameter](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params).

```tsx
getPermissions({
  item: { type: "HeadingBlock", props: { id: "Heading-1234" } }, // Get resolved permissions for Heading-1234
});
// { delete: false }
```

The `getPermissions` function will be redefined when after resolving dynamic permissions, so it's generally required to wrap it in a `useEffect` hook:

```tsx
const [myPermissions, setMyPermissions] = useState(getPermissions());

useEffect(() => {
  setMyPermissions(getPermissions());
}, [getPermissions]);
```

##### `root`

Specify `root` to retrieve the permissions for the `root`, as set by the [`permissions` parameter](/docs/api-reference/configuration/component-config#permissions).

```tsx
getPermissions({ root: true });
// { delete: false }
```

##### `type`

Specify `type` to retrieve the permissions for a given component type, as set by the [`permissions` parameter](/docs/api-reference/configuration/component-config#permissions).

```tsx
getPermissions({ type: "HeadingBlock" });
// { delete: false }
```

### `history`

The `history` API provides programmatic access to the undo/redo [AppState](/docs/api-reference/data-model/app-state) history.

| Param                                 | Example                             | Type                           |
| ------------------------------------- | ----------------------------------- | ------------------------------ |
| [`back`](#historyback)                | `() => void`                        | Function                       |
| [`forward`](#historyforward)          | `() => void`                        | Function                       |
| [`hasPast`](#historyhaspast)          | `true`                              | Boolean                        |
| [`hasFuture`](#historyhasfuture)      | `false`                             | Boolean                        |
| [`histories`](#historyhistories)      | `[{ id: 'abc123', data: {} }]`      | [History](#history-params)\[\] |
| [`index`](#historyindex)              | `5`                                 | Number                         |
| [`setHistories`](#sethistories)       | `setHistories: (histories) => void` | Function                       |
| [`setHistoryIndex`](#sethistoryindex) | `setHistoryIndex: (index) => void`  | Function                       |

#### `history.back()`

A function to move the app state back through the [histories](#historyhistories).

#### `history.forward()`

A function to move the app state forward through the [histories](#historyhistories).

#### `history.hasPast`

A boolean describing whether or not the present app state has past history items.

#### `history.hasFuture`

A boolean describing whether or not the present app state has future history items.

#### `history.histories`

An array describing the recorded history as `History` objects.

##### `History` params

| Param   | Example  | Type                                                 |
| ------- | -------- | ---------------------------------------------------- |
| `state` | `{}`     | [AppState](/docs/api-reference/data-model/app-state) |
| `id`    | `abc123` | String                                               |

###### `state`

The [app state](/docs/api-reference/data-model/app-state) payload for this history entry.

###### `id`

An optional ID for this history entry.

#### `history.index`

The index of the currently selected history in [`history.histories`](#historyhistories)

#### `setHistories`

A function to set the history state.

```tsx
setHistories([]); // clears all history
```

#### `setHistoryIndex`

A function to set current history index.

```tsx
setHistoryIndex(2);
```

### `refreshPermissions(params)`

Force the permissions to refresh, running all [`resolvePermissions` functions](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params) and skipping the cache.

```tsx
resolvePermissions(); // Refresh all permissions
```

#### Params

| Param  | Example                                           | Type    |
| ------ | ------------------------------------------------- | ------- |
| `item` | `{ type: "HeadingBlock", props: { id: "1234" } }` | Object  |
| `root` | `false`                                           | Boolean |
| `type` | `"HeadingBlock"`                                  | String  |

##### `item`

Specify `item` to refresh the permissions for a given component instance only.

```tsx
refreshPermissions({
  item: { type: "HeadingBlock", props: { id: "Heading-1234" } }, // Force refresh the resolved permissions for Heading-1234
});
```

##### `root`

Specify `root` to refresh the permissions for the `root` only.

```tsx
refreshPermissions({ root: true });
```

##### `type`

Specify `type` to refresh the permissions for all components of a given component type.

```tsx
refreshPermissions({ type: "HeadingBlock" });
```

### `selectedItem`

The currently selected item, as defined by `appState.ui.itemSelector`.

```tsx
console.log(selectedItem);
// { type: "Heading", props: {id: "my-heading"} }
```

{/_ ===== ./docs/pages/docs/api-reference/theming.mdx ===== _/}

import { Callout } from "nextra/components";

# Theming

<Callout type="info">
  Theming in Puck is currently limited in functionality, and being explored via
  [#139 on GitHub](https://github.com/measuredco/puck/issues/139).
</Callout>

CSS properties for theming the default Puck user interface.

## Properties

| Param                                                             | Example |
| ----------------------------------------------------------------- | ------- |
| [`--puck-font-family`](#--puck-font-family)                       | `Arial` |
| [`--puck-font-family-monospaced`](#--puck-font-family-monospaced) | `Menlo` |

### `--puck-font-family`

The font family used for the Puck interface. Must be used with the `no-external` bundle that stops Puck from loading the default font.

```css
/* Load bundle without existing font */
@import "@measured/puck/no-external.css";

:root {
  --puck-font-family: Arial;
}
```

### `--puck-font-family-monospaced`

The font family used for monospaced elements of the Puck interface.

```css
/* Monospaced fonts don't use external files, so the default bundle is safe */
@import "@measured/puck/puck.css";

:root {
  --puck-font-family-monospaced: Menlo;
}
```

{/_ ===== ./docs/pages/docs/extending-puck/composition.mdx ===== _/}

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# Composition

Puck uses compositional patterns enable completely custom editor interfaces. [See an example](https://demo.puckeditor.com/custom-ui/edit/).

## Using composition

Composition can be achieved by providing [`children`](/docs/api-reference/components/puck#children) to the [`<Puck>` component](/docs/api-reference/components/puck):

```tsx showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <div
        style={{ display: "grid", gridTemplateColumns: "1fr 2fr", gridGap: 16 }}
      >
        <div>
          {/* Render the drag-and-drop preview */}
          <Puck.Preview />
        </div>
        <div>
          {/* Render the component list */}
          <Puck.Components />
        </div>
      </div>
    </Puck>
  );
}
```

<PuckPreview
config={{
    components: {
      HeadingBlock: {
        render: () => {
          return <span>Hello, world</span>;
        },
      },
    },
  }}
data={{
    content: [{ type: "HeadingBlock", props: { id: "HeadingBlock-1" } }],
    root: { props: {} },
  }}

>

  <div style={{ display: "grid", gridTemplateColumns: "1fr 2fr", gridGap: 16 }}>
    <div>
      <Puck.Components />
    </div>
    <div>
      <Puck.Preview />
    </div>
  </div>
</PuckPreview>

## Compositional components

Puck exposes its core components, allowing you to compose them together to create new layouts:

- [`<Puck.Components>`](/docs/api-reference/components/puck-components) - A draggable list of components.
- [`<Puck.Fields>`](/docs/api-reference/components/puck-fields) - The fields for the currently selected item.
- [`<Puck.Outline>`](/docs/api-reference/components/puck-outline) - An interactive outline.
- [`<Puck.Preview>`](/docs/api-reference/components/puck-preview) - A drag-and-drop preview.

The internal UI for these components can also be changed by implementing [UI overrides](/docs/extending-puck/overrides) or [theming](theming).

### Helper components

Puck also exposes helper components for even deeper customization:

- [`<Drawer>`](/docs/api-reference/components/drawer) - A reference list of items that can be dragged into a droppable area, normally `<Puck.Preview>`.
- [`<Drawer.Item>`](/docs/api-reference/components/drawer-item) - An item that can be dragged from a `<Drawer>`.
- [`<FieldLabel>`](/docs/api-reference/components/field-label) - A styled label for creating inputs.

## Further reading

- [Internal Puck API](/docs/extending-puck/internal-puck-api)
- [UI overrides](/docs/extending-puck/ui-overrides)

{/_ ===== ./docs/pages/docs/extending-puck/custom-fields.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";
import { AutoField, FieldLabel } from "@/puck";

# Custom Fields

Puck can be extended with completely custom fields for different use-cases.

## Creating a custom field

Creating a custom field is possible using the [`custom` field type](/docs/api-reference/fields/custom):

```tsx copy showLineNumbers {5-15}
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
              style={{ border: "1px solid black", padding: 4 }}
            />
          ),
        },
      },
      render: ({ title }) => {
        return <p>{title}</p>;
      },
    },
  },
};
```

The [`onChange` function](/docs/api-reference/fields/custom#onchangevalue-ui) updates the Puck data payload for the field name, in this case "title".

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: ({ name, onChange, value }) => {
          return (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
              style={{
                background: "white",
                border: "1px solid black",
                padding: 4,
              }}
/>
);
},
},
},
defaultProps: {
title: "Hello, world",
},
render: ({ title }) => {
return <p style={{ margin: 0 }}>{title}</p>;
},
}}
/>

## Adding a label

You can add your own label, but it's recommended to use the [`<FieldLabel>` component](/docs/api-reference/components/field-label) provided by Puck to seamlessly integrate into the Puck field UI.

```tsx copy showLineNumbers {1, 11-13}
import { FieldLabel } from "@measured/puck";

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          label: "Label Example",
          render: ({ field }) => (
            <FieldLabel label={field.label}>
              <input {/*...*/} />
            </FieldLabel>
          ),
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "custom",
        label: "Label Example",
        render: ({ field, name, onChange, value }) => {
          return (
            <FieldLabel label={field.label}>
              <input
                defaultValue={value}
                name={name}
                onChange={(e) => onChange(e.currentTarget.value)}
                style={{
                  background: "white",
                  border: "1px solid black",
                  padding: 4,
                }}
/>
</FieldLabel>
);
},
},
},
defaultProps: {
title: "Hello, world",
},
render: ({ title }) => {
return <p style={{ margin: 0 }}>{title}</p>;
},
}}
/>

## Rendering Puck fields internally

Use the [`<AutoField>` component](/docs/api-reference/components/auto-field) to render Puck fields within your custom field.

```tsx copy showLineNumbers {1, 12-16}
import { AutoField } from "@measured/puck";

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          label: "Label Example",
          render: ({ field, value, onChange }) => (
            <FieldLabel label={field.label}>
              <AutoField
                field={{ type: "text" }}
                onChange={(value) => onChange(value)}
                value={value}
              />
            </FieldLabel>
          ),
        },
        // ...
      },
    },
  },
};
```

<ConfigPreview
label="Example"
componentConfig={{
    fields: {
      title: {
        type: "custom",
        label: "AutoField Example",
        render: ({ field, value, onChange }) => {
          return (
            <FieldLabel label={field.label}>
              <AutoField
                field={{ type: "text" }}
value={value}
onChange={onChange}
/>
</FieldLabel>
);
},
},
},
defaultProps: {
title: "Hello, world",
},
render: ({ title }) => {
return <p style={{ margin: 0 }}>{title}</p>;
},
}}
/>

## Updating the UI state

The [`onChange` function](/docs/api-reference/fields/custom#onchangevalue-ui) can also be used to modify the [Puck UI state](/docs/api-reference/data-model/app-state#ui) at the same time as updating the field value:

```tsx copy showLineNumbers {14,15}
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) =>
                onChange(
                  e.currentTarget.value,
                  // Close the left side bar when this field is changed
                  { leftSideBarVisible: false }
                )
              }
              style={{ border: "1px solid black", padding: 4 }}
            />
          ),
        },
      },
      render: ({ title }) => {
        return <p>{title}</p>;
      },
    },
  },
};
```

## Further reading

- [The `<AutoField>` API reference](/docs/api-reference/components/auto-field)
- [The `<FieldLabel>` API reference](/docs/api-reference/components/field-label)
- [The `custom` field API reference](/docs/api-reference/fields/custom)

{/_ ===== ./docs/pages/docs/extending-puck/field-transforms.mdx ===== _/}

import { Callout } from "nextra/components";

# Field Transforms

Puck lets you modify props before rendering in the editor via the [`FieldTransforms` API](/docs/api-reference/field-transforms).

Use this API to implement custom rendering behavior for specific field types, which can be used to implement features such as inline text editing.

<Callout type="info">
  Field transforms only apply to components rendered in `<Puck>` and will not be applied to `<Render>`.
</Callout>

## Implementing a transform

Specify a transforms object for the fields you want to modify before rendering:

```tsx
const fieldTransforms = {
  text: ({ value }) => <div>Value: {value}</div>, // Wrap all text field props in divs
};

const Example = () => <Puck fieldTransforms={fieldTransforms} />;
```

## Making it interactive

Combine transforms with [Overlay Portals](/docs/integrating-puck/overlay-portals) to make them interactive.

```tsx
import { registerOverlayPortal } from "@measured/puck";

const EditableText = ({ value }) => {
  const ref = useRef(null);

  useEffect(() => {
    if (ref.current) {
      // Register the element as an overlay portal
      registerOverlayPortal(ref.current);
    }
  }, [ref.current]);

  return (
    // Mark the element as editable for inline text editing
    <p ref={ref} contentEditable>
      {value}
    </p>
  );
};

const fieldTransforms = {
  text: EditableText,
};

const Example = () => <Puck fieldTransforms={fieldTransforms} />;
```

## Define new fields

As with [field type overrides](/docs/extending-puck/ui-overrides#introducing-new-field-types), field transforms let you define your own field types:

```tsx
const fieldTransforms = {
  example: () => <div />,
};
```

## Distributing field transforms as plugins

Distribute transforms as plugins to package up custom behavior.

```tsx
const plugin = {
  fieldTransforms: {
    example: ({ value }) => <div>{value}</div>, // Wrap all example fields with divs
  },

  // This example combines transforms with overrides
  overrides: {
    fieldTypes: {
      example: () => <input />, // Define a field interface
    },
  },
};

const Example = () => <Puck plugins={[plugin]} />;
```

## Further reading

- [Field Transforms API reference](/docs/api-reference/field-transforms)
- [Overlay Portals API reference](/docs/integrating-puck/overlay-portals)

{/_ ===== ./docs/pages/docs/extending-puck/internal-puck-api.mdx ===== _/}

---

## title: Internal Puck API

# Internal Puck API

Puck exposes it's internal API as [`PuckApi`](/docs/api-reference/puck-api) for extending Puck with custom functionality within [custom fields](/docs/extending-puck/custom-fields), [compositional interfaces](/docs/extending-puck/composition) or [UI overrides](/docs/extending-puck/ui-overrides).

## Accessing the internal API

You can access [`PuckApi`](/docs/api-reference/puck-api) via two hooks:

- [`usePuck`](/docs/api-reference/functions/use-puck) - returns `PuckApi` as part of your component render lifecycle
- [`useGetPuck`](/docs/api-reference/functions/use-get-puck) - returns a function to access the latest `PuckApi` at call time

### Within the render lifecycle

To access the API within your render lifecycle, use the `usePuck` hook. You can use a selector to limit re-rendering to a specific part of the API.

```tsx copy
import { createUsePuck } from "@measured/puck";

const usePuck = createUsePuck();

const Example = () => {
  // Use a selector so you only re-render when the selected type changes
  const type = usePuck((s) => s.selectedItem?.type || "Nothing");

  return <h2>{type} selected</h2>;
};
```

See the [`usePuck`](/docs/api-reference/functions/use-puck) docs for a full API reference.

### Outside of the render lifecycle

Often it's not necessary to re-render your component when the PuckApi changes. Puck provides the `useGetPuck` hook for accessing the latest `PuckApi` at call time.

```tsx copy
import { useGetPuck } from "@measured/puck";

const Example = () => {
  const getPuck = useGetPuck();

  const handleClick = useCallback(() => {
    // Get the latest PuckApi value
    const { appState } = getPuck();

    console.log(appState);
  }, [getPuck]);

  return <button onClick={handleClick}>Click me</button>;
};
```

See the [`useGetPuck`](/docs/api-reference/functions/use-get-puck) docs for a full API reference.

## Usage in practice

Generally, you'll want to combine this with composition, UI overrides or custom fields. **PuckApi cannot currently be accessed outside of these contexts**.

Here's an example using the internal API to render the page data as JSON using composition:

```tsx
import { Puck, createUsePuck } from "@measured/puck";

const usePuck = createUsePuck();

const JSONRenderer = () => {
  const appState = usePuck((s) => s.appState);

  return <div>{JSON.stringify(appState.data)}</div>;
};

export function Editor() {
  return (
    <Puck>
      <JSONRenderer />
    </Puck>
  );
}
```

## Further reading

- [`PuckApi` API reference](/docs/api-reference/puck-api)
- [`usePuck` API reference](/docs/api-reference/functions/use-puck)
- [`useGetPuck` API reference](/docs/api-reference/functions/use-get-puck)
- [Composition](/docs/extending-puck/composition)
- [Custom fields](/docs/extending-puck/custom-fields)
- [UI overrides](/docs/extending-puck/ui-overrides)

{/_ ===== ./docs/pages/docs/extending-puck/plugins.mdx ===== _/}

# Plugin API

import { Callout } from "nextra/components";

<Callout>
  The plugin API is highly experimental and is likely to experience breaking
  changes.
</Callout>

The [plugin API](/docs/api-reference/plugins) enables developers to share extensions to Puck, and are generally built on top of existing APIs.

## Official plugins

Puck provides official plugins for common use-cases:

- [`emotion-cache`](https://github.com/measuredco/puck/tree/main/packages/plugin-emotion-cache): Inject emotion cache into the Puck iframe.
- [`heading-analyzer`](https://github.com/measuredco/puck/tree/main/packages/plugin-heading-analyzer): Analyze the heading outline of your page and be warned when you're not respecting WCAG 2 accessibility standards.

Please see the [awesome-puck repo](https://github.com/measuredco/awesome-puck) for a full list of community plugins.

## Loading a Plugin

To load a plugin, provide it to the [`plugins` prop](/docs/api-reference/components/puck#plugins) on the `<Puck>` component.

```tsx showLineNumbers {2,8}
import { Puck } from "@measured/puck";
import myPlugin from "my-puck-plugin";

export function Editor() {
  return (
    <Puck
      // ...
      plugins={[myPlugin]}
    />
  );
}
```

## Developing a Plugin

If you're familiar with Puck, you can likely already build a Puck plugin. See the [Plugin API reference](/docs/api-reference/plugins) for a full breakdown of available APIs.

### Transforming fields

Plugins support [Field Transforms](/docs/extending-puck/field-transforms), enabling you to modify prop data before it's rendered in the `<Puck>` preview.

```tsx showLineNumbers copy
const plugin = {
  fieldTransforms: {
    // Make all props powered by "text" field pink in the editor
    text: ({ value }) => <span style={{ color: "hotpink" }}>{value}</span>,
  },
};
```

### Overriding the UI

Plugins support [UI Overrides](/docs/extending-puck/ui-overrides), enabling you to override discrete section of the Puck interface.

```tsx showLineNumbers copy
const plugin = {
  overrides: {
    // Make all drawer items pink
    drawerItem: ({ name }) => <div style={{ color: "hotpink" }}>{name}</div>,
  },
};
```

<Callout type="info">

<b>Override currying</b>

Plugin overrides are rendered in the order they are defined. Unless otherwise specified, all overrides are _curried_, meaning that the return node of one plugin will be passed as `children` to the next plugin.

This may result in some incompatible plugin combinations. To improve your chance of building a widely compatible plugin, consider:

1. Implementing as few override methods as you need
2. Always rendering `children` if possible

</Callout>

### Introducing new field types

Both the field transforms and overrides let you introduce [entirely new field types](/docs/extending-puck/ui-overrides#introducing-new-field-types). Plugins can combine this functionality to bundle up new field behavior in a convenient package.

This example uses [Overlay Portals](overlay-portals) to create an interactive rich text field that can modified directly in the editor preview.

```tsx showLineNumbers copy {6-8, 12-20}
import { registerOverlayPortal } from "@measured/puck";

const plugin = {
  overrides: {
    // Add a richText field type
    fieldTypes: {
      richText: ({ name, value }) => <input name={name} value={value} />,
    },
  },
  fieldTransforms: {
    // Wrap the value in a span, create an overlay portal, and make it editable
    richText: ({ value }) => {
      const handleInput = useCallback(() => {}, []); // Implement your input behavior

      return (
        <span ref={registerOverlayPortal} contentEditable onInput={handleInput}>
          {value}
        </span>
      );
    },
  },
};
```

## Further reading

- [Plugin API reference](/docs/api-reference/plugin)
- [FieldTransforms API reference](/docs/api-reference/field-transforms)
- [UI Overrides](/docs/extending-puck/ui-overrides)

{/_ ===== ./docs/pages/docs/extending-puck/theming/fonts.mdx ===== _/}

# Fonts

Puck uses the [Inter typeface family](https://rsms.me/inter/) by default, loaded via a CDN.

It's possible to change the font, or provide your own version of Inter if you need to host it locally.

## Load your own font file

To load your own font file, use the `no-external.css` bundle instead of the primary one.

```css
/* @import "@measured/puck/puck.css"; */
@import "@measured/puck/no-external.css";
```

## Changing the font family

To change the font family Puck uses, change the [`--puck-font-family`](/docs/api-reference/theming#--puck-font-family) CSS property:

```css
/* @import "@measured/puck/puck.css"; */
@import "@measured/puck/no-external.css";

:root {
  --puck-font-family: Arial;
}
```

{/_ ===== ./docs/pages/docs/extending-puck/theming/overview.mdx ===== _/}

import { Callout } from "nextra/components";

# Theming

<Callout type="info">
  Theming in Puck is currently limited in functionality, and being explored via
  [#139 on GitHub](https://github.com/measuredco/puck/issues/139).
</Callout>

The [Theming API](/docs/api-reference/theming) supports:

- [Fonts](fonts): Change the font family, or font loading mechanism.

For further changes to the Puck interface, use the [composition](../composition) and [UI overrides](../ui-overrides) APIs.

## Further reading

- [Theming API reference](/docs/api-reference/theming)
- [Composition](../composition.mdx)
- [UI overrides](../ui-overrides.mdx)

{/_ ===== ./docs/pages/docs/extending-puck/ui-overrides.mdx ===== _/}

import { Callout } from "nextra/components";

# UI overrides

<Callout>
  The overrides API is highly experimental and is likely to experience breaking
  changes.
</Callout>

Overrides allow you to change how Puck renders its default interface. It can be used with or without [composition](/docs/extending-puck/composition).

There are many different overrides available. See the [`overrides` API reference](/docs/api-reference/overrides) for the full list.

## Implementing an override

Use the [`overrides` prop](/docs/api-reference/components/puck#overrides) to implement an override:

```tsx showLineNumbers copy {7-12}
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck
      // ...
      overrides={{
        // Render a custom element for each item in the component list
        drawerItem: ({ name }) => (
          <div style={{ backgroundColor: "hotpink" }}>{name}</div>
        ),
      }}
    />
  );
}
```

## Overriding field types

You can override all fields of certain type by specifying the [`fieldTypes` override](/docs/api-reference/overrides/field-types).

```tsx showLineNumbers copy {8-18}
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck
      // ...
      overrides={{
        fieldTypes: {
          // Override all text fields with a custom input
          text: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
              style={{ border: "1px solid black", padding: 4 }}
            />
          ),
        },
      }}
    />
  );
}
```

## Introducing new field types

Specify new field types to expose new fields to your components.

```tsx showLineNumbers copy {9}
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck
      // ...
      overrides={{
        fieldTypes: {
          myField: ({ name, onChange, value }) => <div />,
        },
      }}
    />
  );
}
```

<Callout type="info">
  <b>TypeScript consideration</b>: When introducing new field types with
  TypeScript, you'll need to extend the available field types with the `fields`
  key in your `Config` type generic.
</Callout>

## Examples

### Custom publish button

A common use case is to override the Puck header. You can either use the [`header` override](/docs/api-reference/overrides/header) to change the entire header, or use the [`headerActions` override](/docs/api-reference/overrides/header-actions) to inject new controls into the header and change the publish button.

Here's an example that also leverage the [internal Puck API](/docs/extending-puck/internal-puck-api) to replace the default publish button with a custom one:

```tsx showLineNumbers copy {10-30}
import { Puck, createUsePuck } from "@measured/puck";

const usePuck = createUsePuck();

const save = () => {};

export function Editor() {
  return (
    <Puck
      // ...
      overrides={{
        headerActions: ({ children }) => {
          const appState = usePuck((s) => s.appState);

          return (
            <>
              <button
                onClick={() => {
                  save(appState.data);
                }}
              >
                Save
              </button>

              {/* Render default header actions, such as the default Button */}
              {/*{children}*/}
            </>
          );
        },
      }}
    />
  );
}
```

## Further reading

- [`overrides` API reference](/docs/api-reference/overrides)
- [Composition](/docs/extending-puck/composition)
- [Internal Puck API](/docs/extending-puck/internal-puck-api)

{/_ ===== ./docs/pages/docs/getting-started.mdx ===== _/}

# Getting Started

## Installation

Install the package

```sh npm2yarn copy
npm i @measured/puck --save
```

Or generate a Puck application using a [recipe](https://github.com/measuredco/puck#recipes)

```sh copy
npx create-puck-app my-app
```

## Render the editor

```jsx copy filename="Editor.jsx"
import { Puck } from "@measured/puck";
import "@measured/puck/puck.css";

// Create Puck component config
const config = {
  components: {
    HeadingBlock: {
      fields: {
        children: {
          type: "text",
        },
      },
      render: ({ children }) => {
        return <h1>{children}</h1>;
      },
    },
  },
};

// Describe the initial data
const initialData = {};

// Save the data to your database
const save = (data) => {};

// Render Puck editor
export function Editor() {
  return <Puck config={config} data={initialData} onPublish={save} />;
}
```

## Render the page

```jsx copy filename="Page.jsx"
import { Render } from "@measured/puck";

export function Page() {
  return <Render config={config} data={data} />;
}
```

{/_ ===== ./docs/pages/docs/guides/migrations/dropzones-to-slots.mdx ===== _/}

---

## title: Migrating - DropZones to Slots

# How to migrate from DropZones to Slots

This guide will help you migrate from [`DropZones`](/docs/api-reference/components/drop-zone) to [Slots](/docs/api-reference/fields/slot).

---

[Slot fields](/docs/api-reference/fields/slot) replace the [`<DropZone>` component](/docs/api-reference/components/drop-zone), introducing an inline data model that supports [`defaultProps`](/docs/api-reference/configuration/component-config#defaultprops), [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) and [Server Components](/docs/integrating-puck/server-components) out-of-the-box.

## Replace DropZone instances

Replace your `<DropZone>` instances with [slot fields](/docs/api-reference/fields/slot) and the slot [render function](/docs/api-reference/fields/slot#render-function).

**Before**

```tsx {5}
const config = {
  components: {
    Example: {
      render: () => {
        return <DropZone zone="items" allow={["HeadingBlock"]} />;
      },
    },
  },
};
```

**After**

```tsx {5-7, 10, 13}
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "slot",
        },
      },
      defaultProps: {
        items: [], // Slots support defaultProps and other APIs like resolveData
      },
      render: ({ items: Items }) => {
        return <Items allow={["HeadingBlock"]} />; // Slots support most DropZone APIs
      },
    },
  },
};
```

## The data model

The slot data model is inline and recursive. This means that instead of storing data in a global `zones` object, data is stored as arrays of [ComponentData](/docs/api-reference/data-model/component-data) as a prop.

**Before**

```json showLineNumbers {10-20}
{
  "content": [
    {
      "type": "Grid",
      "props": {
        "id": "Grid-12345"
      }
    }
  ],
  "zones": {
    "Grid-12345:items": [
      {
        "type": "HeadingBlock",
        "props": {
          "id": "Heading-12345",
          "title": "Hello, world"
        }
      }
    ]
  }
}
```

**After**

```json showLineNumbers {7-15}
{
  "content": [
    {
      "type": "Grid",
      "props": {
        "id": "Grid-12345",
        "items": [
          {
            "type": "HeadingBlock",
            "props": {
              "id": "Heading-12345",
              "title": "Hello, world"
            }
          }
        ]
      }
    }
  ]
}
```

### Migrating legacy data

For new slots, you don't need to do anything. If you're migrating existing DropZones to slots, you will need to migrate your the data accordingly. Puck provides the [`migrate()` helper](/docs/api-reference/functions/migrate) to help with this:

```tsx
import { migrate } from "@measured/puck";
import config from "puck.config.tsx";

const newData = migrate(legacyData, config);
```

This will migrate any existing zone in `zones` where you have defined a `slot` with the same name.

### Migrating dynamic zones to slots

To migrate DropZone data with dynamic zone names (e.g., those generated when rendering DropZones in a loop), use the [`migrateDynamicZonesForComponent`](/docs/api-reference/functions/migrate#migratedynamiczonesforcomponent) option in the [`migrate()` helper](/docs/api-reference/functions/migrate).

```tsx
const newData = migrate(legacyData, config, {
  migrateDynamicZonesForComponent: {
    Columns: (props, zones) => {
      return {
        ...props,
        columns: Object.values(zones).map((zone) => ({
          column: zone,
        })),
      };
    },
  },
});
```

## Further reading

- [The `slot` field API](/docs/api-reference/fields/slot)
- [The `DropZone` component](/docs/api-reference/components/drop-zone)

{/_ ===== ./docs/pages/docs/index.mdx ===== _/}

# Introduction

Welcome to the Puck documentation!

## What is Puck?

Puck is a modular, open-source visual editor for React.js. You can use Puck to build custom drag-and-drop experiences with your own application and React components.

Because Puck is just a React component, it plays well with all React.js environments, including Next.js. You own your data and there's no vendor lock-in.

Puck is also licensed under MIT, making it suitable for both internal systems and commercial applications.

## Main Features

| Feature                                                                   | Description                                                                                                          |
| ------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
| [Component Configuration](/docs/integrating-puck/component-configuration) | Integrate your own components with Puck by providing render functions and configuring fields that map to your props. |
| [Root Configuration](/docs/integrating-puck/root-configuration)           | Customize the root component that wraps all other Puck components.                                                   |
| [Multi-column Layouts](/docs/integrating-puck/multi-column-layouts)       | Create multi-column layouts using nested components. Now supports advanced CSS layouts.                              |
| [Categories](/docs/integrating-puck/categories)                           | Group your components in the side bar.                                                                               |
| [Dynamic Props](/docs/integrating-puck/dynamic-props)                     | Dynamically set props after user input and mark fields as read-only                                                  |
| [Dynamic Fields](/docs/integrating-puck/dynamic-fields)                   | Dynamically set fields based on user input                                                                           |
| [External Data Sources](/docs/integrating-puck/external-data-sources)     | Load content from a third-party CMS or other data source                                                             |
| [Server Components](/docs/integrating-puck/server-components)             | Opt-in support for React Server Components                                                                           |
| [Data Migration](/docs/integrating-puck/data-migration)                   | Migrate between breaking Puck releases and your own breaking prop changes                                            |
| [Viewports](/docs/integrating-puck/viewports)                             | Preview and edit your content in a same-origin iframe to simulate different viewports                                |
| [Feature Toggling](/docs/integrating-puck/feature-toggling)               | Toggle Puck features, like duplication or deletion, via the permissions API.                                         |

## Get Support

If you have any questions about Puck, please open a [GitHub issue](https://github.com/measuredco/puck/issues) or join us on [Discord](https://discord.gg/D9e4E3MQVZ).

Or [book a discovery call](https://app.cal.com/chrisvxd/puck-enquiry/) for hands-on support and consultancy.

## License

Puck is licensed under MIT.

{/_ ===== ./docs/pages/docs/integrating-puck/categories.mdx ===== _/}

# Categories

Categories allow you to group components in the left side bar.

## Creating categories

Use the [`categories` API](/docs/api-reference/configuration/config#categories) to define the component categories.

```tsx {2-6} copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock", "ParagraphBlock"],
    },
  },
  // ...
};
```

Components can appear in separate categories:

```tsx /HeadingBlock/ copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock", "ParagraphBlock"],
    },
    foundational: {
      components: ["HeadingBlock"],
    },
  },
  // ...
};
```

You can also change the title, collapse and hide categories:

```tsx {5,6,10} copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock", "ParagraphBlock"],
      title: "Text",
      defaultExpanded: false, // Collapse this category by default
    },
    foundational: {
      components: ["HeadingBlock"],
      visible: false, // Mark this category as hidden
    },
  },
  // ...
};
```

## The "other" category

Any uncategorized components will be grouped in the `other` category. This will be visible by default. It respects the same API as other categories.

```tsx {6-8} copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock", "ParagraphBlock"],
    },
    other: {
      title: "Other components",
    },
  },
  // ...
};
```

## TypeScript

You can pass in available category names to the `Config` type if using TypeScript

```tsx copy {3}
import type { Config } from "@measured/puck";

const config: Config<{}, {}, "typography" | "interactive"> = {
  categories: {
    typography: {},
    interactive: {},
  },
  // ...
};
```

## Further reading

- [`categories` API reference](/docs/api-reference/configuration/config#categories)
- [`renderComponentList` API reference](/docs/api-reference/components/puck#rendercomponentlistparams)

{/_ ===== ./docs/pages/docs/integrating-puck/component-configuration.mdx ===== _/}

import { ConfigPreview, PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# Component Configuration

Puck's core behaviour is configured via the [Config](/docs/api-reference/configuration/config). This describes:

- which components are available to Puck
- how to render each component
- which fields to show when the user selects a component
- additional information, like [category grouping](categories)

The [Config](/docs/api-reference/configuration/config) is provided via the `config` prop to the main Puck components:

- [`<Puck>`](/docs/api-reference/components/puck) reads the Config and renders an editor UI. The user interacts with the editor to produce a [data payload](/docs/api-reference/data-model/data).
- [`<Render>`](/docs/api-reference/components/render) takes a [data payload](/docs/api-reference/data-model/data) and renders it according to the provided Config.

## The `render` function

Components can be defined via the `components` object in [Config](/docs/api-reference/configuration/config). Every definition must provide a [`render` function](/docs/api-reference/configuration/component-config#renderprops):

```tsx showLineNumbers copy {4-6}
const config = {
  components: {
    HeadingBlock: {
      render: () => {
        return <h1>Hello, world</h1>;
      },
    },
  },
};
```

This tells Puck that **HeadingBlock** is a valid component, and describes how to render it.

When the user drags the component onto the preview and hits **Publish** in the editor UI via the `<Puck>` component, this Config will produce a [data payload](/docs/api-reference/data-model/data) like this:

```json copy
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234"
      }
    }
  ],
  "root": {}
}
```

The data payload and Config together tell `<Render>` how to render the page. It can also be provided to `<Puck>` as an [initial `data` payload](/docs/api-reference/components/puck#data).

<PuckPreview
label="Try interacting with the heading"
config={{
    components: {
      HeadingBlock: {
        render: () => {
          return <span>Hello, world</span>;
        },
      },
    },
  }}
data={{
    content: [{ type: "HeadingBlock", props: { id: "HeadingBlock-1" } }],
    root: { props: {} },
  }}

> <Puck.Preview />
> </PuckPreview>

### TypeScript

If you're using TypeScript, we recommend strictly typing your config:

```tsx copy {1,3-5} /Components/2
import type { Config } from "@measured/puck";

type Components = {
  HeadingBlock: {};
};

const config: Config<Components> = {
  components: {
    HeadingBlock: {
      render: () => {
        return <h1>Hello, world</h1>;
      },
    },
  },
};
```

## Adding fields

[Fields](/docs/api-reference/fields) allow users to provide input to components. The value of each field is passed in as a prop to the `render` function.

You can define a field via the [`fields` parameter](/docs/api-reference/configuration/component-config#fields):

```tsx showLineNumbers copy {5-7} /title/2,3
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      render: ({ title }) => {
        return <h1>{title}</h1>;
      },
    },
  },
};
```

This will render a [Text field](/docs/api-reference/fields/text) when the user selects an instance of the **HeadingBlock** component in the editor UI.

<ConfigPreview
label='Text field example'
componentConfig={{
fields: {
title: {
type: "text",
},
},
render: ({ title }) => {
return <span>{title}</span>;
},

}}
/>

When the user modifies the input, the editor will produce a data payload like this:

```json copy {7}
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234",
        "title": "Hello, world"
      }
    }
  ],
  "root": {}
}
```

### TypeScript

It's best to define the props for the component if using TypeScript. This enables strict type checking for your fields.

```tsx copy {5}
import type { Config } from "@measured/puck";

type Components = {
  HeadingBlock: {
    title: string;
  };
};

const config: Config<Components> = {
  // ...
};
```

## Setting default props

Default props allow you to set an initial value for a prop when a new component is added.

Provide an object to the [`defaultProps`](/docs/api-reference/configuration/component-config#fields) parameter to configure this:

```tsx showLineNumbers copy {9-11}
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      defaultProps: {
        title: "Hello, world",
      },
      render: ({ title }) => {
        return <h1>{title}</h1>;
      },
    },
  },
};
```

Unlike [default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), `defaultProps` are stored in the data payload and will populate the Puck fields.

<ConfigPreview
label="Text field example"
componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <span>{title}</span>;
    },
  }}
/>

{/_ ===== ./docs/pages/docs/integrating-puck/data-migration.mdx ===== _/}

# Data Migration

## Version migrating

Puck follows semantic versioning. Major releases may introduce breaking changes for your Data payload.

Puck provides the [`migrate`](/docs/api-reference/functions/migrate) helper method to help migrate legacy data payloads to the latest data model, transforming any deprecated properties to their latest counterparts as described by the [Data API reference](/docs/api-reference/data-model/data).

```tsx
import { migrate } from "@measured/puck";

migrate(legacyData);
```

## Breaking changes to props

Renaming or removing the props passed to your components are considered breaking changes. Any existing [Data](/docs/api-reference/data-model/data) payloads that reference these props will be unable to render.

There are two strategies for dealing with this:

1. Retaining backwards-compatible props
2. Implementing a prop migration

### Retaining backwards-compatibility

The easiest way to avoid breaking changes is to implement your prop changes in a backwards compatible manor:

```tsx copy showLineNumbers {2}
const config = {
  HeadingBlock: ({ title, heading }) => <h1>{heading || title}</h1>,
};
```

### Implementing a prop migration

It will often be preferrable to update the underlying [Data](/docs/api-reference/data-model/data) payload. Puck provides the [`transformProps`](/docs/api-reference/functions/transform-props) utility method to conveniently transform the props for a given component throughout the payload.

```tsx copy showLineNumbers {15-18}
import { transformProps } from "@measured/puck";

const config = {
  // Renamed `title` prop to `heading`
  HeadingBlock: ({ heading }) => <h1>{heading}</h1>,
};

const data = {
  content: [
    // HeadingBlock references the legacy `title` prop
    { type: "HeadingBlock", props: { title: "Hello, world" } },
  ],
};

const updatedData = transformProps(data, {
  // Map `heading` to the legacy `title` prop
  HeadingBlock: ({ title, ...props }) => ({ heading: title, ...props }),
});

console.log(updatedData);
// { content: [{ type: "HeadingBlock", props: { heading: "Hello, world" } }] };
```

You may choose to run this transform every time you render your content, or perform a batch operation against your database.

```tsx copy showLineNumbers filename="Example showing data being updated before rendering"
import { Puck, Render, transformProps } from "@measured/puck";

const transforms = {
  HeadingBlock: ({ title, ...props }) => ({ heading: title, ...props }),
};

export const MyEditor = ({ data, config }) => (
  <Puck data={transformProps(data, transforms)} config={config} />
);

export const MyPage = ({ data, config }) => (
  <Render data={transformProps(data, transforms)} config={config} />
);
```

## Further reading

- [`Data` API reference](/docs/api-reference/data-model/data)
- [`migrate` API reference](/docs/api-reference/functions/migrate)
- [`transformProps` API reference](/docs/api-reference/functions/transform-props)

{/_ ===== ./docs/pages/docs/integrating-puck/dynamic-fields.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";

# Dynamic Fields

Dynamic field resolution allows you to change the [field configuration](/docs/api-reference/configuration/component-config#fields) for a component based on the current component props.

## Dynamic component fields

The [`resolveFields` function](/docs/api-reference/configuration/component-config#resolvefieldsdata-params) allows you to make synchronous and asynchronous changes to the field configuration.

For example, we can set the configuration of one field based on the prop value of another:

```tsx {4-25} showLineNumbers copy
const config = {
  components: {
    MyComponent: {
      resolveFields: (data) => {
        const fields = {
          drink: {
            type: "radio",
            options: [
              { label: "Water", value: "water" },
              { label: "Orange juice", value: "orange-juice" },
            ],
          },
        };

        if (data.props.drink === "water") {
          return {
            ...fields,
            waterType: {
              // ... Define field
            },
          };
        }

        return fields;
      },
      // ...
    },
  },
};
```

<ConfigPreview
label='Try changing the "drink" field'
componentConfig={{
resolveFields: (data) => {
const fields = {
drink: {
type: "radio",
options: [
{ label: "Water", value: "water" },
{ label: "Orange juice", value: "orange-juice" },
],
},
};

      if (data.props.drink === "water") {
        return {
          ...fields,
          waterType: {
            type: "radio",
            options: [
              { label: "Still", value: "still" },
              { label: "Sparkling", value: "sparkling" },
            ],
          },
        };
      }

      return fields;
    },
    defaultProps: {
      drink: "water",
      waterType: "still",
    },
    render: ({ drink, waterType }) => (
      <p>
        {drink}
        {drink === "water" ? ` (${waterType})` : ""}
      </p>
    ),

}}
/>

### Making asynchronous calls

The [`resolveFields` function](/docs/api-reference/configuration/component-config#resolvefieldsdata-params) also enables asynchronous calls.

Here's an example populating the options for a [`select` field](/docs/api-reference/fields/select) based on a [`radio` field](/docs/api-reference/fields/radio)

```tsx {4-24} showLineNumbers copy
const config = {
  components: {
    MyComponent: {
      resolveFields: async (data, { changed, lastFields }) => {
        // Don't call the API unless `category` has changed
        if (!changed.category) return lastFields;

        // Make an asynchronous API call to get the options
        const options = await getOptions(data.category);

        return {
          category: {
            type: "radio",
            options: [
              { label: "Fruit", value: "fruit" },
              { label: "Vegetables", value: "vegetables" },
            ],
          },
          item: {
            type: "select",
            options,
          },
        };
      },
      render: ({ item }) => <h1>{item}</h1>,
    },
  },
};
```

<ConfigPreview
label='Try changing the "category" field'
componentConfig={{
resolveFields: async (data, { changed, lastFields }) => {
if (!changed.category) return lastFields;

      await new Promise((resolve) => setTimeout(resolve, 500));

      return {
        category: {
          type: "radio",
          options: [
            { label: "Fruit", value: "fruit" },
            { label: "Vegetables", value: "vegetables" },
          ],
        },
        item: {
          type: "select",
          options:
            data.props.category === "fruit"
              ? [
                { label: "Select a fruit", value: "" },
                { label: "Apple", value: "apple" },
                { label: "Orange", value: "orange" },
                { label: "Tomato", value: "tomato" }
              ] : [
                { label: "Select a vegetable", value: "" },
                { label: "Broccoli", value: "broccoli" },
                { label: "Cauliflower", value: "cauliflower" },
                { label: "Mushroom", value: "mushroom" },
              ],
        },
      };
    },

    defaultProps: {
      category: "fruit",
      item: "",
    },
    render: ({ item }) => <p>{item}</p>,

}}
/>

## Limitations

The [`slot` field](/docs/api-reference/fields/slot) is not currently supported by Dynamic Fields, but most use-cases can be achieved using [Dynamic Props](dynamic-props).

## Further reading

- [`resolveFields` API reference](/docs/api-reference/configuration/component-config#resolvefieldsdata-params)

{/_ ===== ./docs/pages/docs/integrating-puck/dynamic-props.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";

# Dynamic Props

Dynamic prop resolution allows you to change the props for a component after the props have been changed by the user. This is useful for making third-party API calls, such as requesting the latest content from a headless CMS.

## Dynamic component props

The [`resolveData` function](/docs/api-reference/configuration/component-config#resolvedatadata-params) allows you to make changes to the props and set fields as read-only.

For example, we can set the value of one prop to another:

```tsx {12-18} showLineNumbers copy
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
        resolvedTitle: {
          type: "text",
        },
      },
      resolveData: async ({ props }) => {
        return {
          props: {
            resolvedTitle: props.title,
          },
        };
      },
      render: ({ resolvedTitle }) => {
        return <h1>{resolvedTitle}</h1>;
      },
    },
  },
};
```

<ConfigPreview
label='Try changing the "title" field'
componentConfig={{
    fields: {
      title: {
        type: "text",
      },
      resolvedTitle: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    resolveData: ({ props }) => {
      return {
        props: { resolvedTitle: props.title },
      };
    },
    render: ({ resolvedTitle }) => {
      return <p style={{ margin: 0 }}>{resolvedTitle}</p>;
},

}}
/>

> When inserting components with `resolveData`, the Puck state will update twice - once for the initial insert, and once more when the method resolves, if it changes the data. This will be reflected in the undo/redo history.

### Setting fields as read-only

[`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) also allows us to mark fields as read-only using the [`readOnly` parameter](/docs/api-reference/configuration/component-config#datareadonly-1).

```tsx {17} showLineNumbers copy
const config = {
  components: {
    HeadingBlock: {
      // ...
      resolveData: async ({ props }) => {
        return {
          props: {
            resolvedTitle: props.title,
          },
          readOnly: { resolvedTitle: true },
        };
      },
      // ...
    },
  },
};
```

<ConfigPreview
label='The resolvedTitle field is locked'
componentConfig={{
    fields: {
      title: {
        type: "text",
      },
      resolvedTitle: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    resolveData: ({ props }) => {
      return {
        props: { resolvedTitle: props.title },
        readOnly: { resolvedTitle: true }
      };
    },
    render: ({ resolvedTitle }) => {
      return <p style={{ margin: 0 }}>{resolvedTitle}</p>;
},

}}
/>

### Preventing duplicate calls

It's possible that `resolveData` may carry out an expensive operation (like an API call) that we want to avoid making unless a specific prop has changed.

This can be restricted by checking the [`changed` param](/docs/api-reference/configuration/component-config#paramschanged) before calling any expensive operations.

```tsx {6} showLineNumbers copy
const config = {
  components: {
    HeadingBlock: {
      // ...
      resolveData: async ({ props }, { changed }) => {
        if (!changed.text) return { props };

        return {
          props: {
            resolvedTitle: await expensiveOperation(props.title),
          },
        };
      },
      // ...
    },
  },
};
```

## Dynamic Root props

The `resolveData` method is also available on the [root component](/docs/api-reference/configuration/config#root).

```tsx showLineNumbers copy {12-18}
const config = {
  components: {},
  root: {
    fields: {
      title: {
        type: "text",
      },
      resolvedTitle: {
        type: "text",
      },
    },
    resolveData: async ({ props }) => {
      return {
        props: {
          resolvedTitle: props.title,
        },
      };
    },
    render: ({ children, resolvedTitle }) => {
      return (
        <>
          <h1>{resolvedTitle}</h1>
          {children}
        </>
      );
    },
  },
};
```

## Triggering `resolveData`

Resolve data is triggered whenever the props for a component change, or when the [`resolveAllData` utility](/docs/api-reference/functions/resolve-all-data) is used.

```tsx
import { resolveAllData } from "@measured/puck";

const updatedData = await resolveAllData(data, config);
```

## Further reading

- [`resolveData` API reference](/docs/api-reference/configuration/component-config#resolvedatadata-params)
- [`resolveAllData` API reference](/docs/api-reference/functions/resolve-all-data)

{/_ ===== ./docs/pages/docs/integrating-puck/external-data-sources.mdx ===== _/}

import { ConfigPreview } from "@/docs/components/Preview";

# External Data Sources

There are several different approaches for loading external data into a Puck component.

It's possible for Puck components to load their own data internally on the client, or on the server using [React server components](/docs/integrating-puck/server-components). This doesn't require any Puck configuration.

If you want to provide the user a way to select the data, you can use the [`external` field type](/docs/api-reference/fields/external).

## Selecting external data

The [`external` field type](/docs/api-reference/fields/external) allows users to select tabular data from a third-party data source, like a headless CMS. This will load the data once and save it into the [data payload](/docs/api-reference/data-model/data).

<ConfigPreview
label="Example"
componentConfig={{
fields: {
data: {
type: "external",
getItemSummary: (item) => item.title,
fetchList: async () => {
return [
{ title: "Hello, world", description: "Lorem ipsum 1" },
{ title: "Goodbye, world", description: "Lorem ipsum 2" },
];
},
},
},
render: ({ data }) => {
if (!data) {
return "No data selected";
}

      return (
        <>
          <b>{data.title}</b>
          <p>{data.description}</p>
        </>
      );
    },

}}
/>

```tsx {5-17} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            // Query an API for a list of items
            const items = await fetch(`/api/items`).then((res) => res.json());
            // [
            //   { title: "Hello, world", description: "Lorem ipsum 1" },
            //   { title: "Goodbye, world", description: "Lorem ipsum 2" },
            // ];

            return items;
          },
        },
      },
      render: ({ data }) => {
        if (!data) {
          return "No data selected";
        }

        return (
          <>
            <b>{data.title}</b>
            <p>{data.description}</p>
          </>
        );
      },
    },
  },
};
```

You can also use the [`showSearch` parameter](/docs/api-reference/fields/external#showsearch) to show a search input to the user.

## Data syncing

To keep the data in sync with the external source, we can combine the `external` field with the [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) function.

This technique re-fetches the content every time the page is loaded, or the [`resolveAllData` utility](/docs/api-reference/functions/resolve-all-data) is called.

```tsx showLineNumbers {19-37} /id: 0/1 /id: 1/ copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            // Query an API for a list of items
            const items = await fetch(`/api/items`).then((res) => res.json());
            // [
            //   { title: "Hello, world", id: 0 },
            //   { title: "Goodbye, world", id: 1 },
            // ];

            return items;
          },
        },
      },
      resolveData: async ({ props }, { changed }) => {
        if (!props.data) return { props };

        // Don't query unless `data` has changed since resolveData was last run
        if (!changed.data) return { props };

        // Re-query the API for a particular item
        const latestData = await fetch(`/api/items/${props.data.id}`).then(
          (res) => res.json()
        );
        // { title: "Hello, world", description: "Lorem ipsum 1", id: 0 }

        return {
          props: {
            // Update the value for `data`
            data: latestData,
          },
        };
      },
      // ...
    },
  },
};
```

## Hybrid authoring

Hybrid authoring enables users to edit fields inline, or populate those fields with data from an external source.

<ConfigPreview
label="Example"
componentConfig={{
fields: {
data: {
type: "external",
getItemSummary: (item) => item.title,
fetchList: async () => {
return [
{ title: "Hello, world", description: "Lorem ipsum 1" },
{ title: "Goodbye, world", description: "Lorem ipsum 2" },
];
},
},
title: {
type: "text",
},
},
resolveData: async ({ props }) => {
if (!props.data) return { props, readOnly: { title: false } };

      return {
        props: { title: props.data.title },
        readOnly: { title: true }
      };
    },
    render: ({ title }) => {
      return (
        <>
          <b>{title}</b>
        </>
      );
    },

}}
/>

This can be achieved by mapping the data from `data.title` to `title` in [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params), and marking the field as read-only.

```tsx showLineNumbers {21,22} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          // ...
        },
        title: {
          type: "text",
        },
      },
      resolveData: async ({ props }, { changed }) => {
        // Remove read-only from the title field if `data` is empty
        if (!props.data) return { props, readOnly: { title: false } };

        // Don't query unless `data` has changed since resolveData was last run
        if (!changed.data) return { props };

        return {
          props: {
            title: props.data.title,
            readOnly: { title: true },
          },
        };
      },
      render: ({ title }) => <b>{title}</b>,
    },
  },
};
```

## External data packages

We provide helper packages to load data from common data sources.

- [`contentful`](https://github.com/measuredco/puck/tree/main/packages/field-contentful): Select content entries from a [Contentful](https://www.contentful.com) space.

## Further reading

- [`external` field API reference](/docs/api-reference/fields/external)
- [`resolveData` API reference](/docs/api-reference/configuration/component-config#resolvedatadata-params)
- [`resolveAllData` API reference](/docs/api-reference/functions/resolve-all-data)

<div id="puck-portal-root" />

{/_ ===== ./docs/pages/docs/integrating-puck/feature-toggling.mdx ===== _/}

# Feature Toggling

Feature toggling is enabled by Puck's [Permissions API](/docs/api-reference/permissions). This enables you to toggle behavior like:

- Deletion
- Dragging
- Duplication
- Editing (setting all fields to read-only)
- etc

See the [supported permissions reference](/docs/api-reference/permissions#supported-permissions) for a complete list.

## Toggling features globally

Toggling features across the entire Puck instance can be done with global permissions. These can be set by the [`permissions` prop](/docs/api-reference/components/puck#permissions) on the Puck component:

```tsx showLineNumbers copy {4-6}
export function Editor() {
  return (
    <Puck
      permissions={{
        delete: false, // Disable delete function on all components
      }}
      // ...
    />
  );
}
```

## Toggling features per component

Toggling feature for all instance of a component can be done using component permissions. This is controlled by the [`permissions` parameter](/docs/api-reference/configuration/component-config#permissions) on the component config, and inherits the global permissions.

```tsx showLineNumbers copy {4-6}
const config = {
  components: {
    HeadingBlock: {
      permissions: {
        delete: false, // Disable delete function on all HeadingBlock instances
      },
      // ...
    },
  },
};
```

Component permissions can also be applied to the `root` config.

## Toggling features dynamically

Dynamic permissions enable runtime calculation of permissions based on the component data, enabling instance-specific permissions. This is controlled by the [`resolvePermissions` parameter](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params) on the component config.

```tsx showLineNumbers copy {4-12}
const config = {
  components: {
    HeadingBlock: {
      resolvePermissions: (data, { permissions }) => {
        if (data.props.locked) {
          return {
            delete: false, // Disable delete function when HeadingBlock `locked` prop is set
          };
        }

        return permissions; // Return inherited permissions (component or global)
      },
      // ...
    },
  },
};
```

### Asynchronous feature toggling

Permissions can be resolved asynchronously, enabling powerful patterns like querying permissions from an endpoint whenever the data changes.

```tsx showLineNumbers copy {4-8}
const config = {
  components: {
    HeadingBlock: {
      resolvePermissions: async (data) => {
        const serverPermissions = await myPermissionsApi(data.props.id); // Query permissions from a server

        return serverPermissions;
      },
      // ...
    },
  },
};
```

### Preventing duplicate calls

Permission resolvers are cached based on the component props. If none of the props change, then the resolver won't be called. This prevents duplicate calls to expensive asynchronous operations.

However, it's possible that you may want to avoid making an expensive operation unless a _specific_ prop has changed, rather than any prop.

This can be restricted by checking the [`changed` param](/docs/api-reference/configuration/component-config#paramschanged-2) before calling any expensive operations.

```tsx {6} showLineNumbers copy
const config = {
  components: {
    HeadingBlock: {
      // ...
      resolvePermissions: async (data, { changed, lastPermissions }) => {
        if (!changed.locked) return lastPermissions; // Return last permissions if `locked` hasn't changed

        return await myExpensivePermissionsApi(data),
      },
      // ...
    },
  },
};
```

## Further reading

- [Permissions API reference](/docs/api-reference/permissions)
- [Supported permissions reference](/docs/api-reference/permissions#supported-permissions)
- [Global `permissions` prop API reference](/docs/api-reference/components/puck#permissions)
- [Component `permissions` param API reference](/docs/api-reference/configuration/component-config#permissions)
- [Component `resolvePermissions` param API reference](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params)

{/_ ===== ./docs/pages/docs/integrating-puck/multi-column-layouts.mdx ===== _/}

---

## title: Multi-column Layouts

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";
import { Callout } from "nextra/components";

# Multi-column Layouts

Puck supports nested and multi-column layouts across any CSS layout using the [`slot` field](/docs/api-reference/fields/slot).

<Callout type="info">Slots replace the [`<DropZone>` component](/docs/api-reference/components/drop-zone) component, which will soon be deprecated and removed. For migration notes, see [these docs](/docs/guides/migrations/dropzones-to-slots).</Callout>

## Nested components

Add the [`slot`](/docs/api-reference/fields/slot) field to your component to create a zone that you can drop components into.

```tsx {5-7,10} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => {
        return <Content />;
      },
    },
    Card: {
      render: () => <div>Hello, world</div>,
    },
  },
};
```

<PuckPreview
label="Nested components example"
config={{
    components: {
      Example: {
        fields: {
          content: {
            type: "slot",
          },
        },
        render: ({ content: Content }) => {
          return (
            <div style={{ padding: 32 }}>
<Content />

</div>
);
},
},
Card: {
render: () => {
return (
<div
style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }} >
Hello, world
</div>
);
},
},
},
}}
data={{
    content: [
      {
        type: "Example",
        props: {
          id: "Example-1",
          content: [{ type: "Card", props: { id: "Example-2" } }],
        },
      },
    ],
    root: { props: {} },
  }}

> <Puck.Preview />
> </PuckPreview>

## Fixed layouts

Combine multiple DropZones to achieve fixed layouts. By default, components inside a DropZone are arranged along the vertical (`block`) axis.

```tsx {5-10,17,18} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        leftColumn: {
          type: "slot",
        },
        rightColumn: {
          type: "slot",
        },
      },
      render: ({ leftColumn: LeftColumn, rightColumn: RightColumn }) => {
        return (
          <div
            style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 16 }}
          >
            <LeftColumn />
            <RightColumn />
          </div>
        );
      },
    },
    Card: {
      render: ({ text }) => <div>{text}</div>,
    },
  },
};
```

<PuckPreview
label="Fixed layout example"
config={{
    root: {
      render: ({ puck: { renderDropZone: DropZone } }) => (
        <DropZone zone="default-zone" disallow={["Card"]} />
      ),
    },
    components: {
      Example: {
        fields: {
          leftColumn: {
            type: "slot",
          },
          rightColumn: {
            type: "slot",
          },
        },
        render: ({ leftColumn: LeftColumn, rightColumn: RightColumn }) => {
          return (
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "1fr 1fr",
                gap: 16,
              }} >
<LeftColumn />
<RightColumn />

</div>
);
},
},
Card: {
render: ({ content }) => {
return (
<div
style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }} >
{content}
</div>
);
},
},
},
}}
data={{
    content: [
      {
        type: "Example",
        props: {
          id: "Example-1",
          leftColumn: [
            {
              type: "Card",
              props: { id: "Example-2", content: "1" },
            },
          ],
          rightColumn: [
            {
              type: "Card",
              props: { id: "Example-3", content: "2" },
            },
          ],
        },
      },
    ],
    root: { props: {} },
  }}

> <Puck.Preview />
> </PuckPreview>

## Fluid layouts

Apply the [CSS display](https://developer.mozilla.org/en-US/docs/Web/CSS/display) property to a slot via the [`style`](/docs/api-reference/components/drop-zone#style) or [`className`](/docs/api-reference/components/drop-zone#className) props to arrange your components in different layouts. Puck supports drag-and-drop for all `display` values, including `grid` and `flex`.

```tsx {12-15} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => (
        <Content
          style={{
            // Use CSS grid in this slot
            display: "grid",
            gridTemplateColumns: "2fr 1fr",
            gap: 16,
          }}
        />
      ),
    },
    Card: {
      render: ({ text }) => <div>{text}</div>,
    },
  },
};
```

<PuckPreview
label="Fluid layout using CSS grid"
config={{
    root: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => (
        <Content
          style={{
            display: "grid",
            gridTemplateColumns: "2fr 1fr",
            gap: 16,
          }}
/>
),
},
components: {
Card: {
render: ({ content }) => {
return (

<div
style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }} >
{content}
</div>
);
},
},
},
}}
data={{
    content: [],
    root: {
      props: {
        content: [
          {
            type: "Card",
            props: { id: "Example-2", content: "1" },
          },
          {
            type: "Card",
            props: { id: "Example-3", content: "2" },
          },
        ],
      },
    },
  }}

> <Puck.Preview />
> </PuckPreview>

## Removing the wrapper

By default, Puck will wrap your components in a `div` element. For some layouts, you may need to eliminate the wrapping element and treat the child component as a direct descendant of its' parent slot.

For example, this is required if you wish to use CSS rules like `flex-grow`, `grid-column`, or `grid-row`.

Use the [`inline`](/docs/api-reference/configuration/component-config#inline) component parameter to remove the wrapping element. **When using this API, you must also specify which element is draggable by passing the [`puck.dragRef` prop](/docs/api-reference/configuration/component-config#puckdragref) to your element's `ref` prop.**

```tsx {13-14,21,24-28} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => (
        <Content
          style={{
            display: "grid",
            gridTemplateColumns: "1fr 1fr 1fr 1fr",
            gridTemplateRows: "1fr 1fr 1fr 1fr",
            gap: 16,
          }}
        />
      ),
    },
    Card: {
      inline: true, // Enable inline mode, removing the Puck wrapper
      render: ({ text, spanCol, spanRow, puck }) => (
        <div
          ref={puck.dragRef} // Let Puck know this element is draggable
          style={{
            gridColumn: `span ${spanCol}`,
            gridRow: `span ${spanRow}`,
          }}
        >
          {text}
        </div>
      ),
    },
  },
};
```

<PuckPreview
label="Advanced grid example"
config={{
    root: {
      fields: {
        Content: {
          type: "slot",
        },
      },
      render: ({ Content }) => (
        <Content
          zone="default-zone"
          style={{
            display: "grid",
            gridTemplateColumns: "1fr 1fr 1fr 1fr",
            gridTemplateRows: "1fr 1fr 1fr",
            gap: 16,
          }}
/>
),
},
components: {
Card: {
inline: true,
render: ({ content, spanCol, spanRow, puck }) => {
return (

<div
style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
                gridColumn: `span ${spanCol}`,
                gridRow: `span ${spanRow}`,
              }}
// Let Puck know this element is draggable
ref={puck.dragRef} >
{content}
</div>
);
},
},
},

}}
data={{
    content: [],
    root: {
      props: {
        Content: [
          {
            type: "Card",
            props: { id: "Example-1", content: "1", spanCol: 2, spanRow: 2 },
          },
          {
            type: "Card",
            props: { id: "Example-2", content: "2", spanCol: 1, spanRow: 1 },
          },
          {
            type: "Card",
            props: { id: "Example-3", content: "3", spanCol: 1, spanRow: 1 },
          },
          {
            type: "Card",
            props: { id: "Example-4", content: "4", spanCol: 2, spanRow: 1 },
          },
          {
            type: "Card",
            props: { id: "Example-5", content: "5", spanCol: 1, spanRow: 1 },
          },
        ],
      },
    },
  }}
/>

## Restricting components

Use the [`allow`](/docs/api-reference/fields/slot#allow) and [`disallow`](/docs/api-reference/fields/slot#disallow) parameters to restrict which components can be dragged into a slot.

```tsx {6} showLineNumbers copy
const config = {
  components: {
    fields: {
      content: {
        type: "slot",
        allow: ["Card"],
      },
    },
    Example: {
      render: ({ content: Content }) => {
        return <Content />;
      },
    },
  },
};
```

Combine this with [categories](/docs/integrating-puck/categories) to restrict behavior based on your existing groups.

```tsx {2-6,12} showLineNumbers copy
const config = {
  categories: {
    typography: {
      components: ["Card"],
    },
  },
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
          allow: categories.typography.components,
        },
      },
      render: ({ content: Content }) => {
        return <Content />;
      },
    },
  },
};
```

Alternatively, you can provide `allow` and `disallow` [to your render function](/docs/api-reference/fields/slot#allow-1).

## Setting default props

Use slots with [`defaultProps`](/docs/api-reference/configuration/component-config#defaultprops) to pre-populate it when the component is inserted with an array of [`ComponentData`](/docs/api-reference/data-model/component-data).

```tsx {9-18} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      defaultProps: {
        content: [
          {
            type: "Card",
            props: {
              text: "Pre-populated",
            },
          },
        ],
      },
      render: ({ content: Content }) => <Content />,
    },
    Card: {
      render: ({ text }) => <div>{text}</div>,
    },
  },
};
```

<PuckPreview
label="Fluid layout using CSS grid"
config={{
    root: {
      fields: {
        content: {
          type: "slot",
        },
      },
      defaultProps: {
        content: [
          {
            type: "Card",
            props: {
              text: "Pre-populated",
            },
          },
        ],
      },
      render: ({ content }) =>
        content({
          style: {
            display: "grid",
            gridTemplateColumns: "2fr 1fr",
            gap: 16,
          },
        }),
    },
    components: {
      Card: {
        render: ({ content }) => {
          return (
            <div
              style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }} >
{content}

</div>
);
},
},
},
}}
data={{
    content: [],
    root: {
      props: {
        content: [
          {
            type: "Card",
            props: { id: "Example-2", content: "Pre-populated" },
          },
        ],
      },
    },
  }}

> <Puck.Preview />
> </PuckPreview>

## Further reading

- [The `slot` field API](/docs/api-reference/fields/slot)
- [The `inline` component config](/docs/api-reference/configuration/component-config#inline)

{/_ ===== ./docs/pages/docs/integrating-puck/overlay-portals.mdx ===== _/}

import {
PuckPreview,
OverlayPortalPreview,
OverlayPortalTabsPreview,
} from "@/docs/components/Preview";
import { Puck } from "@/puck";

# Overlay Portals

Overlay Portals enable you to disable the Puck overlay when hovering over specific elements, making them interactive in the editor.

Use the [`registerOverlayPortal` API](/docs/api-reference/functions/register-overlay-portal) to mark an element as a portal.

```tsx
import { registerOverlayPortal } from "@measured/puck";

const Example = () => {
  const ref = useRef<HTMLButtonElement>(null);

  useEffect(() => registerOverlayPortal(ref.current), [ref.current]);

  return (
    <button ref={ref} onClick={() => alert("Click")}>
      Clickable
    </button>
  );
};
```

<PuckPreview
label="Overlay Portals example"
config={{
    components: {
      Example: {
        render: () => {
          return (
            <div style={{ padding: 32 }}>
<OverlayPortalPreview />

</div>
);
},
},
},
}}
data={{
    content: [
      {
        type: "Example",
        props: {
          id: "Example-1",
        },
      },
    ],
    root: { props: {} },
  }}

> <Puck.Preview />
> </PuckPreview>

Portals can be used to create interactive functionality for previewing, such as to paginate through tabs, or combined with [`usePuck()`](/docs/extending-puck/internal-puck-api) to create an inline form input.

## Example: Tabs

<PuckPreview
label="Tabs example"
config={{
    components: {
      Example: {
        render: () => {
          return <OverlayPortalTabsPreview />;
        },
      },
    },
  }}
data={{
    content: [
      {
        type: "Example",
        props: {
          id: "Example-1",
        },
      },
    ],
    root: { props: {} },
  }}

> <Puck.Preview />
> </PuckPreview>

{/_ ===== ./docs/pages/docs/integrating-puck/root-configuration.mdx ===== _/}

# Root Configuration

The root is the top-level component within Puck. It:

1. Renders a single wrapper around your other components. This can be overwritten with a `render` function.
2. Stores meta data, like the page title. This can be extended with `fields`.

Configuring the root is similar to [configuring components](component-configuration).

## The root `render` function

Use the [`root` parameter](/docs/api-reference/configuration/config#root) to specify a [`render` function](/docs/api-reference/configuration/component-config#renderprops):

```tsx showLineNumbers copy {10-12}
const config = {
  components: {
    HeadingBlock: {
      render: () => {
        return <h1>Hello, world</h1>;
      },
    },
  },
  root: {
    render: ({ children }) => {
      return <div>{children}</div>;
    },
  },
};
```

The root `render` function will wrap all of the components. `children` is a node containing the nested components.

If you don't render `children`, your components will not be rendered unless you define another [slot](/docs/api-reference/fields/slot).

### Example output

Given a minimal data payload containing one **HeadingBlock**

```json copy
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234"
      }
    }
  ],
  "root": {}
}
```

the example config will render HTML nodes like this:

```html
<!-- root render -->
<div>
  <!-- HeadingBlock render -->
  <h1>Hello, world</h1>

  <!-- Remaining nodes -->
</div>
```

## Adding fields

Root fields provide user input to the root render method, and can be used to store metadata.

By default, `root` is configured with a `title` text field:

```tsx showLineNumbers copy /title/
const config = {
  // ...
  root: {
    render: ({ children, title }) => {
      return (
        <div>
          <h1>{title}</h1>
          {children}
        </div>
      );
    },
  },
};
```

You can override the default field configuration by providing custom [Fields](/docs/api-reference/fields) to the [`fields` parameter](/docs/api-reference/configuration/component-config#fields):

```tsx showLineNumbers copy {4-7} /description/2,3
const config = {
  // ...
  root: {
    fields: {
      title: { type: "text" }, // You need to redefine the `title` field if we want to retain it
      description: { type: "textarea" },
    },
    render: ({ children, title, description }) => {
      return (
        <div>
          <h1>{title}</h1>
          <p>{description}</p>
          {children}
        </div>
      );
    },
  },
};
```

When the user modifies the inputs, the editor will produce a data payload like this:

```json copy {6-9}
{
  "content": [
    // ...
  ],
  "root": {
    "props": {
      "title": "Hello, world",
      "description": "Lorem ipsum"
    }
  }
}
```

### TypeScript

Generic types can be passed to the `Config` type to strictly type your root configuration:

```tsx copy {1,3-5} /RootProps/2
import type { Config } from "@measured/puck";

type RootProps = {
  description: string;
};

const config: Config<{}, RootProps> = {
  // ...
};
```

## Setting default props

Provide an object to the [`defaultProps`](/docs/api-reference/configuration/component-config#fields) parameter to configure default props for the root fields:

```tsx showLineNumbers copy {8-11}
const config = {
  // ...
  root: {
    fields: {
      title: { type: "text" },
      description: { type: "textarea" },
    },
    defaultProps: {
      title: "Hello, world",
      description: "Lorem ipsum",
    },
    render: ({ children, title, description }) => {
      return (
        <div>
          <h1>{title}</h1>
          <p>{description}</p>
          {children}
        </div>
      );
    },
  },
};
```

Unlike [default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), `defaultProps` are stored in the data payload and will populate the Puck fields.

{/_ ===== ./docs/pages/docs/integrating-puck/server-components.mdx ===== _/}

import { Callout } from "nextra/components";

# React Server Components

Puck provides support for [React Server Components](https://react.dev/reference/react/use-server#use-server) (RSC), but the interactive-nature of Puck requires special consideration.

## Environments

### Server

Puck supports the server environment for the following APIs:

- The [`<Render>`](/docs/api-reference/components/render) component, for rendering pages produced by Puck
- The [`resolveAllData`](/docs/api-reference/functions/resolve-all-data) lib, for running all [data resolvers](/docs/integrating-puck/dynamic-props)

These APIs can be used in an RSC environment, but in order to do so the Puck config that they reference must be RSC-friendly.

This can be done by either avoiding client-only code (React `useState`, etc), or split out client components with the `"use client";` directive.

### Client

All other Puck APIs, including the core `<Puck>` component, cannot run in an RSC environment due to their high-degree of interactivity.

As these APIs render on the client, the Puck config provided must be safe for client-use, avoiding any server-specific logic.

## Implementations

Since the Puck config can be referenced on the client or the server, we need to consider how to satisfy both environments.

There are three approaches to this:

1. Avoid using any client-specific functionality (like React `useState`) in your components
2. Mark your components up with the `"use client";` directive if you need client-specific functionality
3. Create separate configs for client and server rendering

### 1. Avoid client-specific code

Avoiding client-specific code is the easiest way to support RSC across both environments, but may not be realistic for all users. This normally means avoiding React hooks like `useState` or `useContext`.

<Callout type="info">If you're using the legacy [`<DropZone>` component](/docs/api-reference/components/drop-zone), you will may encounter issues with server components. We recommend migrating to the [`slot` field](/docs/api-reference/fields/slot) which provides native server component support. Alternatively, see [our previous server components guide](https://puckeditor.com/v/0.18.3/docs/integrating-puck/server-components) for information on handling DropZones.</Callout>

### 2. Marking up components with `"use client";`

Many modern component libraries will require some degree of client-side behaviour. For these cases, you'll need to mark them up with the `"use¬†client";` directive.

To achieve this, you must import each of those component from a separate file:

```tsx copy showLineNumbers filename="puck.config.tsx"
import type { Config } from "@measured/puck";
import type { HeadingBlockProps } from "./components/HeadingBlock";
import HeadingBlock from "./components/HeadingBlock";

type Props = {
  HeadingBlock: HeadingBlockProps;
};

export const config: Config<Props> = {
  components: {
    HeadingBlock: {
      fields: {
        title: { type: "text" },
      },
      defaultProps: {
        title: "Heading",
      },
      // You must call the component, rather than passing it in directly. This will change in the future.
      render: ({ title }) => <HeadingBlock title={title} />,
    },
  },
};
```

And add the `"use client";` directive to the top of each component file:

```tsx copy showLineNumbers filename="components/HeadingBlock.tsx" {1}
"use client";

import { useState } from "react";

export type HeadingBlockProps = {
  title: string;
};

export default ({ title }: { title: string }) => {
  useState(); // useState fails on the server

  return (
    <div style={{ padding: 64 }}>
      <h1>{title}</h1>
    </div>
  );
};
```

This config can now be rendered inside an RSC component, such as a Next.js app router page:

```tsx copy showLineNumbers filename="app/page.tsx"
import { config } from "../puck.config.tsx";

export default async function Page() {
  const data = await getData(); // Some server function

  const resolvedData = await resolveAllData(data, config); // Optional call to resolveAllData, if this needs to run server-side

  return <Render data={resolvedData} config={config} />;
}
```

### 3. Creating separate configs

Alternatively, consider entirely separate configs for the `<Puck>` and `<Render>` components. This approach can enable you to have different rendering behavior for a component for when it renders on the client or the server.

Create a shared config type:

```tsx copy showLineNumbers filename="puck-types.ts"
import type { Config } from "@measured/puck";

type Props = {
  HeadingBlock: {
    title: string;
  };
};

export type UserConfig = Config<Props>;
```

Define a client component config for use within the `<Puck>` component:

```tsx copy showLineNumbers filename="puck.config.client.tsx"
import type { UserConfig } from "./puck-types.ts";

export const config: UserConfig = {
  components: {
    HeadingBlock: {
      fields: {
        title: { type: "text" },
      },
      defaultProps: {
        title: "Heading",
      },
      render: ({ title }) => {
        useState(); // useState fails on the server

        return (
          <div style={{ padding: 64 }}>
            <h1>{title}</h1>
          </div>
        );
      },
    },
  },
};
```

Define a server config using the shared types for use within the `<Render>` component, excluding fields as they are unnecessary in this environment:

```tsx copy showLineNumbers filename="puck.config.server.tsx"
import type { UserConfig } from "./puck-types.ts";

export const config: UserConfig = {
  components: {
    HeadingBlock: {
      render: ({ title }) => {
        return (
          <div style={{ padding: 64 }}>
            <h1>{title}</h1>
          </div>
        );
      },
    },
  },
};
```

Render the appropriate config depending on the environment. Here's a Next.js app router example of a server render:

```tsx copy showLineNumbers filename="app/page.tsx"
import { config } from "../puck.config.server.tsx";

export default async function Page() {
  const data = await getData(); // Some server function

  return <Render data={data} config={config} />;
}
```

{/_ ===== ./docs/pages/docs/integrating-puck/viewports.mdx ===== _/}

# Viewports

The Puck preview renders in a same-origin iframe that can be resized to simulate different viewports.

## Default viewports

Puck provides 3 viewports [by default](/docs/api-reference/components/puck#default-viewports):

1. Small: 360px wide
2. Medium: 768px wide
3. Large: 1280px wide

Each of the default viewports have 100% height, filling the available space (via the `auto` height parameter).

## Customizing viewports

Customizing the available viewports using the [`viewports` API](/docs/api-reference/components/puck#viewports):

```tsx
export function Editor() {
  return (
    <Puck
      viewports={[
        {
          width: 1440,
          height: "auto", // Optional height. Can be numeric or "auto". Defaults to "auto".
          label: "My Viewport", // Optional. Shown in tooltip.
          icon: <svg />, // Optional. Use lucide-icons to align with Puck UI.
        },
      ]}
      // ...
    />
  );
}
```

## Opting out of iframes

Opt-out of iframe rendering by using the [`iframe` API](/docs/api-reference/components/puck#iframe):

```tsx
export function Editor() {
  return (
    <Puck
      iframe={{
        enabled: false,
      }}
      // ...
    />
  );
}
```

This will disable all viewport functionality.

## Controlling viewports with compositional interfaces

When implementing a [compositional interface](/docs/extending-puck/composition), the `viewports` API will have no effect. Instead, the viewport size can be controlled by the dimensions of the wrapping element that contains [`<Puck.Preview />`](/docs/api-reference/components/puck-preview).

CSS transforms can be used to zoom the viewport without impacting drag-and-drop behaviour.

```tsx {6-8}
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <div style={{ transform: "scale(0.5)", width: 1280 }}>
        <Puck.Preview />
      </div>
    </Puck>
  );
}
```

{/_ ===== ./docs/pages/index.mdx ===== _/}

---

## title: Puck - The open-source visual editor for React

import { Home } from "../components/Home";

<Home />
