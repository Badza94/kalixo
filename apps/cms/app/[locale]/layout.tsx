import { NextIntlClientProvider } from "next-intl";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../globals.css";
import Providers from "./providers";
// import { getServerSession } from "next-auth";
// import { authOptions } from "@/lib/_auth-options";
import { Toaster } from "@workspace/ui/sonner";
import {
  AlertTriangle,
  CheckCircle,
  Info,
  Loader,
  XCircle,
} from "@workspace/ui/lucide-react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function LocaleLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await params;
  // const session = await getServerSession(authOptions);
  const session = undefined;

  return (
    <html lang={locale} suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextIntlClientProvider>
          <Providers session={session}>
            {children}
            <Toaster
              toastOptions={{
                classNames: {
                  error: "!bg-destructive",
                  info: "!bg-blue-400",
                  success: "!bg-green-400",
                  warning: "!bg-orange-400",
                  toast: "!bg-blue-400",
                  description: "!text-red-400",
                  actionButton: "!bg-zinc-400",
                  cancelButton: "!bg-orange-400",
                  closeButton: "!bg-lime-400",
                },
              }}
              icons={{
                success: <CheckCircle className="h-4 w-4 text-green-500" />,
                info: <Info className="h-4 w-4 text-blue-500" />,
                warning: <AlertTriangle className="h-4 w-4 text-amber-500" />,
                error: <XCircle className="h-4 w-4 text-red-500" />,
                loading: (
                  <Loader className="h-4 w-4 text-gray-500 animate-spin" />
                ),
              }}
            />
          </Providers>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
